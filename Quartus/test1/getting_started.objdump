
getting_started.elf:     file format elf32-littlenios2
getting_started.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001a8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000018e4 memsz 0x000018e4 flags r-x
    LOAD off    0x00003000 vaddr 0x40000000 paddr 0x00001904 align 2**12
         filesz 0x00001878 memsz 0x0000199c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000188  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000175c  000001a8  000001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  40000000  00001904  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017b0  400000c8  000019cc  000030c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  40001878  0000317c  00004878  2**2
                  ALLOC, SMALL_DATA
  6 .Nios2_SRAM   00000000  0000317c  0000317c  00004878  2**0
                  CONTENTS
  7 .Nios2_2nd_Core_SRAM 00000000  00010000  00010000  00004878  2**0
                  CONTENTS
  8 .Onchip_SRAM  00000000  08000000  08000000  00004878  2**0
                  CONTENTS
  9 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00004878  2**0
                  CONTENTS
 10 .ARM_A9_HPS_axi_sdram 00000000  4000199c  4000199c  00004878  2**0
                  CONTENTS
 11 .comment      0000002d  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000530  00000000  00000000  000048a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007974  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3d  00000000  00000000  0000c74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000272e  00000000  00000000  0000f689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000071c  00000000  00000000  00011db8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000014d5  00000000  00000000  000124d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_alt_sim_info 00000020  00000000  00000000  000139ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000070  00000000  00000000  000139d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0000152d  00000000  00000000  00013a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000d20  00000000  00000000  00014f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001bf  00000000  00000000  00015c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .thread_model 00000003  00000000  00000000  000179e5  2**0
                  CONTENTS, READONLY
 24 .cpu          00000005  00000000  00000000  000179e8  2**0
                  CONTENTS, READONLY
 25 .qsys         00000001  00000000  00000000  000179ed  2**0
                  CONTENTS, READONLY
 26 .simulation_enabled 00000001  00000000  00000000  000179ee  2**0
                  CONTENTS, READONLY
 27 .sysid_hash   00000004  00000000  00000000  000179ef  2**0
                  CONTENTS, READONLY
 28 .sysid_base   00000004  00000000  00000000  000179f3  2**0
                  CONTENTS, READONLY
 29 .sysid_time   00000004  00000000  00000000  000179f7  2**0
                  CONTENTS, READONLY
 30 .stderr_dev   00000009  00000000  00000000  000179fb  2**0
                  CONTENTS, READONLY
 31 .stdin_dev    00000009  00000000  00000000  00017a04  2**0
                  CONTENTS, READONLY
 32 .stdout_dev   00000009  00000000  00000000  00017a0d  2**0
                  CONTENTS, READONLY
 33 .sopc_system_name 0000000f  00000000  00000000  00017a16  2**0
                  CONTENTS, READONLY
 34 .jdi          00013216  00000000  00000000  00017a25  2**0
                  CONTENTS, READONLY
 35 .sopcinfo     00409e57  00000000  00000000  0002ac3b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001a8 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
400000c8 l    d  .rwdata	00000000 .rwdata
40001878 l    d  .bss	00000000 .bss
0000317c l    d  .Nios2_SRAM	00000000 .Nios2_SRAM
00010000 l    d  .Nios2_2nd_Core_SRAM	00000000 .Nios2_2nd_Core_SRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
4000199c l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
000001e0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 getting_started.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000220 l     O .rwdata	00001060 JTAG_UART
400001f4 l     O .rwdata	0000002c ADC
400001c4 l     O .rwdata	00000030 Audio_Subsystem_Audio
40000168 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
4000010c l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
400000c8 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000007a0 l     F .text	00000048 altera_avalon_jtag_uart_timeout
000007e8 l     F .text	00000100 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000d18 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000edc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000f6c l     F .text	00000068 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
40001428 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
40001894 g     O .bss	00000004 alt_instruction_exception_handler
00000390 g     F .text	00000050 alt_main
4000189c g     O .bss	00000100 alt_irq
000019cc g       *ABS*	00000000 __flash_rwdata_start
00001378 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
40001898 g     O .bss	00000004 errno
4000187c g     O .bss	00000004 alt_argv
4000984c g       *ABS*	00000000 _gp
40001280 g     O .rwdata	00000180 alt_fd_list
00001380 g     F .text	00000078 alt_find_dev
00001638 g     F .text	00000100 memcpy
00000fd4 g     F .text	00000074 alt_io_redirect
00001568 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00000a18 g     F .text	00000158 altera_avalon_jtag_uart_read
00001514 g     F .text	00000054 alt_icache_flush
4000184c g     O .rwdata	00000004 alt_max_fd
00001048 g     F .text	000000ac alt_irq_register
40001870 g     O .rwdata	00000004 _global_impure_ptr
4000199c g       *ABS*	00000000 __bss_end
000012b8 g     F .text	000000c0 alt_tick
00001284 g     F .text	00000034 alt_alarm_stop
40001884 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	0000006c alt_irq_handler
40001400 g     O .rwdata	00000028 alt_dev_null
00000ed8 g     F .text	00000004 alt_dcache_flush_all
40001878 g       *ABS*	00000000 __ram_rwdata_end
40001850 g     O .rwdata	00000008 alt_dev_list
400000c8 g       *ABS*	00000000 __ram_rodata_end
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
4000199c g       *ABS*	00000000 end
000008e8 g     F .text	00000074 altera_avalon_jtag_uart_init
00000168 g     F .exceptions	00000040 alt_instruction_exception_entry
80000000 g       *ABS*	00000000 __alt_stack_pointer
00000d54 g     F .text	0000003c alt_avalon_timer_sc_init
00000b70 g     F .text	000001a8 altera_avalon_jtag_uart_write
000017d0 g     F .text	00000120 __call_exitprocs
000001a8 g     F .text	0000003c _start
40001890 g     O .bss	00000004 _alt_tick_rate
40001888 g     O .bss	00000008 _alt_nticks
00000400 g     F .text	00000314 alt_sys_init
0000095c g     F .text	00000038 altera_avalon_jtag_uart_close
400000c8 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
00000714 g     F .text	00000024 altera_avalon_jtag_uart_read_fd
000014c8 g     F .text	0000004c alt_get_fd
000015c0 g     F .text	00000078 memcmp
0000075c g     F .text	00000024 altera_avalon_jtag_uart_close_fd
4000199c g       *ABS*	00000000 __alt_stack_base
00000780 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000013f8 g     F .text	000000d0 alt_find_file
00000ee4 g     F .text	00000068 alt_dev_llist_insert
00010000 g       *ABS*	00000000 __alt_mem_Nios2_2nd_Core_SRAM
40001878 g       *ABS*	00000000 __bss_start
000001e4 g     F .text	00000094 main
40001878 g     O .bss	00000004 alt_envp
00000738 g     F .text	00000024 altera_avalon_jtag_uart_write_fd
40001860 g     O .rwdata	00000004 alt_errno
00001904 g       *ABS*	00000000 __flash_rodata_start
000003e0 g     F .text	00000020 alt_irq_init
00001260 g     F .text	00000024 alt_release_fd
40001874 g     O .rwdata	00000004 _impure_ptr
40001880 g     O .bss	00000004 alt_argc
00000000 g       *ABS*	00000000 __alt_mem_Nios2_SRAM
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
40001858 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
40001878 g       *ABS*	00000000 _edata
4000199c g       *ABS*	00000000 _end
000001a8 g       *ABS*	00000000 __ram_exceptions_end
00000994 g     F .text	00000084 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
0000158c g     F .text	00000034 exit
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000018f0 g     F .text	00000014 _exit
00000d90 g     F .text	00000080 alt_alarm_start
00001738 g     F .text	00000098 strlen
000010f4 g     F .text	0000016c open
00000f4c g     F .text	00000020 alt_icache_flush_all
40001864 g     O .rwdata	00000004 alt_priority_mask
40001868 g     O .rwdata	00000008 alt_alarm_list
00000e10 g     F .text	000000c8 close
00000278 g     F .text	00000118 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406a14 	ori	at,at,424
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	00001680 	call	168 <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 10c:	04100034 	movhi	r16,16384
 110:	84062704 	addi	r16,r16,6300
 114:	00000806 	br	138 <alt_irq_handler+0x3c>
    i = 0;
 118:	000b883a 	mov	r5,zero
        alt_irq[i].handler(alt_irq[i].context, i); 
 11c:	280490fa 	slli	r2,r5,3
 120:	8085883a 	add	r2,r16,r2
 124:	10c00017 	ldw	r3,0(r2)
 128:	11000117 	ldw	r4,4(r2)
 12c:	183ee83a 	callr	r3
 130:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 134:	20000826 	beq	r4,zero,158 <alt_irq_handler+0x5c>
      if (active & mask)
 138:	2140004c 	andi	r5,r4,1
    mask = 1;
 13c:	00800044 	movi	r2,1
      if (active & mask)
 140:	283ff51e 	bne	r5,zero,118 <alt_irq_handler+0x1c>
      mask <<= 1;
 144:	1085883a 	add	r2,r2,r2
      i++;
 148:	29400044 	addi	r5,r5,1
      if (active & mask)
 14c:	2086703a 	and	r3,r4,r2
 150:	183ffc26 	beq	r3,zero,144 <alt_irq_handler+0x48>
 154:	003ff106 	br	11c <alt_irq_handler+0x20>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

00000168 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 168:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 16c:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 170:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 174:	d0a01217 	ldw	r2,-32696(gp)
 178:	10000826 	beq	r2,zero,19c <alt_instruction_exception_entry+0x34>
{
 17c:	deffff04 	addi	sp,sp,-4
 180:	dfc00015 	stw	ra,0(sp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 184:	2008d0ba 	srli	r4,r4,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 188:	210007cc 	andi	r4,r4,31
 18c:	103ee83a 	callr	r2
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 190:	dfc00017 	ldw	ra,0(sp)
 194:	dec00104 	addi	sp,sp,4
 198:	f800283a 	ret
    NIOS2_BREAK();
 19c:	003da03a 	break	0
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1a0:	0005883a 	mov	r2,zero
}
 1a4:	f800283a 	ret

Disassembly of section .text:

000001a8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1a8:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
     1ac:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1b0:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
     1b4:	d6a61314 	ori	gp,gp,38988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1b8:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
     1bc:	10861e14 	ori	r2,r2,6264

    movhi r3, %hi(__bss_end)
     1c0:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
     1c4:	18c66714 	ori	r3,r3,6556

    beq r2, r3, 1f
     1c8:	10c00326 	beq	r2,r3,1d8 <_start+0x30>

0:
    stw zero, (r2)
     1cc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1d0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1d4:	10fffd36 	bltu	r2,r3,1cc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1d8:	00002780 	call	278 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1dc:	00003900 	call	390 <alt_main>

000001e0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e0:	003fff06 	br	1e0 <alt_after_alt_main>

000001e4 <main>:
 *  1. displays a rotating pattern on the LEDs
 *  2. if any KEY is pressed, the SW switches are used as the rotating pattern
 ******************************************************************************/

int main(void)
{
     1e4:	deffff04 	addi	sp,sp,-4
    /* The base addresses of devices are listed in the "BSP/system.h" file*/
    
	int LED_bits = 0x0F0F0F0F;					// pattern for LED lights
     1e8:	0083c3f4 	movhi	r2,3855
     1ec:	1083c3c4 	addi	r2,r2,3855
		if (LED_bits & 0x80000000)
			LED_bits = (LED_bits << 1) | 1;
		else
			LED_bits = LED_bits << 1;

		for (delay_count = 200000; delay_count != 0; --delay_count);	// delay loop
     1f0:	014000f4 	movhi	r5,3
     1f4:	29435004 	addi	r5,r5,3392
     1f8:	00001206 	br	244 <main+0x60>
			LED_bits = SW_value | (SW_value << 8) | (SW_value << 16) | (SW_value << 24);
     1fc:	1804923a 	slli	r2,r3,8
     200:	1808943a 	slli	r4,r3,16
     204:	1104b03a 	or	r2,r2,r4
     208:	10c4b03a 	or	r2,r2,r3
     20c:	1806963a 	slli	r3,r3,24
     210:	10c4b03a 	or	r2,r2,r3
			while (IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTTONS_BASE));
     214:	00ffc834 	movhi	r3,65312
     218:	18c01437 	ldwio	r3,80(r3)
     21c:	183ffd1e 	bne	r3,zero,214 <main+0x30>
     220:	00000d06 	br	258 <main+0x74>
			LED_bits = (LED_bits << 1) | 1;
     224:	1085883a 	add	r2,r2,r2
     228:	10800054 	ori	r2,r2,1
     22c:	00000e06 	br	268 <main+0x84>
		for (delay_count = 200000; delay_count != 0; --delay_count);	// delay loop
     230:	d8c00017 	ldw	r3,0(sp)
     234:	18ffffc4 	addi	r3,r3,-1
     238:	d8c00015 	stw	r3,0(sp)
     23c:	d8c00017 	ldw	r3,0(sp)
     240:	183ffb1e 	bne	r3,zero,230 <main+0x4c>
		SW_value = IORD_ALTERA_AVALON_PIO_DATA(SLIDER_SWITCHES_BASE);	// read the SW slider switch values
     244:	00ffc834 	movhi	r3,65312
     248:	18c01037 	ldwio	r3,64(r3)
		KEY_value = IORD_ALTERA_AVALON_PIO_DATA(PUSHBUTTONS_BASE); 		// read the pushbutton KEY values
     24c:	013fc834 	movhi	r4,65312
     250:	21001437 	ldwio	r4,80(r4)
		if (KEY_value != 0)						// check if any KEY was pressed
     254:	203fe91e 	bne	r4,zero,1fc <main+0x18>
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, LED_bits);			// light up the green LEDs
     258:	00ffc834 	movhi	r3,65312
     25c:	18800035 	stwio	r2,0(r3)
		if (LED_bits & 0x80000000)
     260:	103ff016 	blt	r2,zero,224 <main+0x40>
			LED_bits = LED_bits << 1;
     264:	1085883a 	add	r2,r2,r2
		for (delay_count = 200000; delay_count != 0; --delay_count);	// delay loop
     268:	d9400015 	stw	r5,0(sp)
     26c:	d8c00017 	ldw	r3,0(sp)
     270:	183ff426 	beq	r3,zero,244 <main+0x60>
     274:	003fee06 	br	230 <main+0x4c>

00000278 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     278:	deffff04 	addi	sp,sp,-4
     27c:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     280:	00d00034 	movhi	r3,16384
     284:	18c03204 	addi	r3,r3,200
     288:	00800034 	movhi	r2,0
     28c:	10867304 	addi	r2,r2,6604
     290:	18801026 	beq	r3,r2,2d4 <alt_load+0x5c>
  {
    while( to != end )
     294:	00d00034 	movhi	r3,16384
     298:	18c03204 	addi	r3,r3,200
     29c:	00900034 	movhi	r2,16384
     2a0:	10861e04 	addi	r2,r2,6264
     2a4:	18800b26 	beq	r3,r2,2d4 <alt_load+0x5c>
     2a8:	00900034 	movhi	r2,16384
     2ac:	10803204 	addi	r2,r2,200
     2b0:	00c00034 	movhi	r3,0
     2b4:	18c67304 	addi	r3,r3,6604
     2b8:	01500034 	movhi	r5,16384
     2bc:	29461e04 	addi	r5,r5,6264
    {
      *to++ = *from++;
     2c0:	18c00104 	addi	r3,r3,4
     2c4:	10800104 	addi	r2,r2,4
     2c8:	193fff17 	ldw	r4,-4(r3)
     2cc:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     2d0:	117ffb1e 	bne	r2,r5,2c0 <alt_load+0x48>
  if (to != from)
     2d4:	00c00034 	movhi	r3,0
     2d8:	18c00804 	addi	r3,r3,32
     2dc:	00800034 	movhi	r2,0
     2e0:	10800804 	addi	r2,r2,32
     2e4:	18801026 	beq	r3,r2,328 <alt_load+0xb0>
    while( to != end )
     2e8:	00c00034 	movhi	r3,0
     2ec:	18c00804 	addi	r3,r3,32
     2f0:	00800034 	movhi	r2,0
     2f4:	10806a04 	addi	r2,r2,424
     2f8:	18800b26 	beq	r3,r2,328 <alt_load+0xb0>
     2fc:	00800034 	movhi	r2,0
     300:	10800804 	addi	r2,r2,32
     304:	00c00034 	movhi	r3,0
     308:	18c00804 	addi	r3,r3,32
     30c:	01400034 	movhi	r5,0
     310:	29406a04 	addi	r5,r5,424
      *to++ = *from++;
     314:	18c00104 	addi	r3,r3,4
     318:	10800104 	addi	r2,r2,4
     31c:	193fff17 	ldw	r4,-4(r3)
     320:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     324:	117ffb1e 	bne	r2,r5,314 <alt_load+0x9c>
  if (to != from)
     328:	00d00034 	movhi	r3,16384
     32c:	18c00004 	addi	r3,r3,0
     330:	00800034 	movhi	r2,0
     334:	10864104 	addi	r2,r2,6404
     338:	18801026 	beq	r3,r2,37c <alt_load+0x104>
    while( to != end )
     33c:	00d00034 	movhi	r3,16384
     340:	18c00004 	addi	r3,r3,0
     344:	00900034 	movhi	r2,16384
     348:	10803204 	addi	r2,r2,200
     34c:	18800b26 	beq	r3,r2,37c <alt_load+0x104>
     350:	00900034 	movhi	r2,16384
     354:	10800004 	addi	r2,r2,0
     358:	00c00034 	movhi	r3,0
     35c:	18c64104 	addi	r3,r3,6404
     360:	01500034 	movhi	r5,16384
     364:	29403204 	addi	r5,r5,200
      *to++ = *from++;
     368:	18c00104 	addi	r3,r3,4
     36c:	10800104 	addi	r2,r2,4
     370:	193fff17 	ldw	r4,-4(r3)
     374:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     378:	117ffb1e 	bne	r2,r5,368 <alt_load+0xf0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     37c:	0000ed80 	call	ed8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     380:	0000f4c0 	call	f4c <alt_icache_flush_all>
}
     384:	dfc00017 	ldw	ra,0(sp)
     388:	dec00104 	addi	sp,sp,4
     38c:	f800283a 	ret

00000390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     390:	defffe04 	addi	sp,sp,-8
     394:	dfc00115 	stw	ra,4(sp)
     398:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     39c:	0009883a 	mov	r4,zero
     3a0:	00003e00 	call	3e0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3a4:	00004000 	call	400 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3a8:	01900034 	movhi	r6,16384
     3ac:	31800004 	addi	r6,r6,0
     3b0:	300b883a 	mov	r5,r6
     3b4:	3009883a 	mov	r4,r6
     3b8:	0000fd40 	call	fd4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3bc:	d1a00b17 	ldw	r6,-32724(gp)
     3c0:	d1600c17 	ldw	r5,-32720(gp)
     3c4:	d1200d17 	ldw	r4,-32716(gp)
     3c8:	00001e40 	call	1e4 <main>
     3cc:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     3d0:	01000044 	movi	r4,1
     3d4:	0000e100 	call	e10 <close>
  exit (result);
     3d8:	8009883a 	mov	r4,r16
     3dc:	000158c0 	call	158c <exit>

000003e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     3e0:	deffff04 	addi	sp,sp,-4
     3e4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     3e8:	00013780 	call	1378 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     3ec:	00800044 	movi	r2,1
     3f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     3f4:	dfc00017 	ldw	ra,0(sp)
     3f8:	dec00104 	addi	sp,sp,4
     3fc:	f800283a 	ret

00000400 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     400:	deffff04 	addi	sp,sp,-4
     404:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     408:	01c00204 	movi	r7,8
     40c:	000d883a 	mov	r6,zero
     410:	000b883a 	mov	r5,zero
     414:	013fc834 	movhi	r4,65312
     418:	21080004 	addi	r4,r4,8192
     41c:	0000d540 	call	d54 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     420:	01800204 	movi	r6,8
     424:	000b883a 	mov	r5,zero
     428:	01100034 	movhi	r4,16384
     42c:	21009204 	addi	r4,r4,584
     430:	00008e80 	call	8e8 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     434:	d1600104 	addi	r5,gp,-32764
     438:	01100034 	movhi	r4,16384
     43c:	21008804 	addi	r4,r4,544
     440:	0000ee40 	call	ee4 <alt_dev_llist_insert>
     444:	d1600104 	addi	r5,gp,-32764
     448:	01100034 	movhi	r4,16384
     44c:	21007d04 	addi	r4,r4,500
     450:	0000ee40 	call	ee4 <alt_dev_llist_insert>
     454:	d1600104 	addi	r5,gp,-32764
     458:	01100034 	movhi	r4,16384
     45c:	21007104 	addi	r4,r4,452
     460:	0000ee40 	call	ee4 <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    ALTERA_UP_AVALON_ADC_INIT ( ADC, ADC);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
     464:	00d00034 	movhi	r3,16384
     468:	18c05a04 	addi	r3,r3,360
     46c:	19000a17 	ldw	r4,40(r3)
     470:	20800017 	ldw	r2,0(r4)
     474:	18800b15 	stw	r2,44(r3)
     478:	20800117 	ldw	r2,4(r4)
     47c:	18800c15 	stw	r2,48(r3)
     480:	2080020b 	ldhu	r2,8(r4)
     484:	18801115 	stw	r2,68(r3)
     488:	2080028b 	ldhu	r2,10(r4)
     48c:	18801215 	stw	r2,72(r3)
     490:	20800317 	ldw	r2,12(r4)
     494:	1005d07a 	srai	r2,r2,1
     498:	1080004c 	andi	r2,r2,1
     49c:	18800d15 	stw	r2,52(r3)
     4a0:	20800317 	ldw	r2,12(r4)
     4a4:	1005d23a 	srai	r2,r2,8
     4a8:	108003cc 	andi	r2,r2,15
     4ac:	10800044 	addi	r2,r2,1
     4b0:	18800e15 	stw	r2,56(r3)
     4b4:	21400317 	ldw	r5,12(r4)
     4b8:	280bd1ba 	srai	r5,r5,6
     4bc:	294000cc 	andi	r5,r5,3
     4c0:	29400044 	addi	r5,r5,1
     4c4:	19400f15 	stw	r5,60(r3)
     4c8:	1145383a 	mul	r2,r2,r5
     4cc:	10c03fcc 	andi	r3,r2,255
     4d0:	18c00268 	cmpgeui	r3,r3,9
     4d4:	1800691e 	bne	r3,zero,67c <alt_sys_init+0x27c>
     4d8:	00c00044 	movi	r3,1
     4dc:	00900034 	movhi	r2,16384
     4e0:	10c06a15 	stw	r3,424(r2)
     4e4:	20c00317 	ldw	r3,12(r4)
     4e8:	1805d43a 	srai	r2,r3,16
     4ec:	1806d63a 	srli	r3,r3,24
     4f0:	0011883a 	mov	r8,zero
     4f4:	01100034 	movhi	r4,16384
     4f8:	21005a04 	addi	r4,r4,360
     4fc:	22001315 	stw	r8,76(r4)
     500:	10803fcc 	andi	r2,r2,255
     504:	01800804 	movi	r6,32
     508:	308fc83a 	sub	r7,r6,r2
     50c:	017fffc4 	movi	r5,-1
     510:	29ced83a 	srl	r7,r5,r7
     514:	21c01415 	stw	r7,80(r4)
     518:	1205883a 	add	r2,r2,r8
     51c:	20801515 	stw	r2,84(r4)
     520:	30cdc83a 	sub	r6,r6,r3
     524:	298ad83a 	srl	r5,r5,r6
     528:	21401615 	stw	r5,88(r4)
     52c:	d1600104 	addi	r5,gp,-32764
     530:	0000ee40 	call	ee4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     534:	00d00034 	movhi	r3,16384
     538:	18c04304 	addi	r3,r3,268
     53c:	19000a17 	ldw	r4,40(r3)
     540:	20800017 	ldw	r2,0(r4)
     544:	18800b15 	stw	r2,44(r3)
     548:	20800117 	ldw	r2,4(r4)
     54c:	18800c15 	stw	r2,48(r3)
     550:	2080020b 	ldhu	r2,8(r4)
     554:	18801115 	stw	r2,68(r3)
     558:	2080028b 	ldhu	r2,10(r4)
     55c:	18801215 	stw	r2,72(r3)
     560:	20800317 	ldw	r2,12(r4)
     564:	1005d07a 	srai	r2,r2,1
     568:	1080004c 	andi	r2,r2,1
     56c:	18800d15 	stw	r2,52(r3)
     570:	20800317 	ldw	r2,12(r4)
     574:	1005d23a 	srai	r2,r2,8
     578:	108003cc 	andi	r2,r2,15
     57c:	10800044 	addi	r2,r2,1
     580:	18800e15 	stw	r2,56(r3)
     584:	21400317 	ldw	r5,12(r4)
     588:	280bd1ba 	srai	r5,r5,6
     58c:	294000cc 	andi	r5,r5,3
     590:	29400044 	addi	r5,r5,1
     594:	19400f15 	stw	r5,60(r3)
     598:	1145383a 	mul	r2,r2,r5
     59c:	10c03fcc 	andi	r3,r2,255
     5a0:	18c00268 	cmpgeui	r3,r3,9
     5a4:	1800481e 	bne	r3,zero,6c8 <alt_sys_init+0x2c8>
     5a8:	00c00044 	movi	r3,1
     5ac:	00900034 	movhi	r2,16384
     5b0:	10c05315 	stw	r3,332(r2)
     5b4:	20c00317 	ldw	r3,12(r4)
     5b8:	1805d43a 	srai	r2,r3,16
     5bc:	1806d63a 	srli	r3,r3,24
     5c0:	0011883a 	mov	r8,zero
     5c4:	01100034 	movhi	r4,16384
     5c8:	21004304 	addi	r4,r4,268
     5cc:	22001315 	stw	r8,76(r4)
     5d0:	10803fcc 	andi	r2,r2,255
     5d4:	01800804 	movi	r6,32
     5d8:	308fc83a 	sub	r7,r6,r2
     5dc:	017fffc4 	movi	r5,-1
     5e0:	29ced83a 	srl	r7,r5,r7
     5e4:	21c01415 	stw	r7,80(r4)
     5e8:	1205883a 	add	r2,r2,r8
     5ec:	20801515 	stw	r2,84(r4)
     5f0:	30cdc83a 	sub	r6,r6,r3
     5f4:	298ad83a 	srl	r5,r5,r6
     5f8:	21401615 	stw	r5,88(r4)
     5fc:	d1600104 	addi	r5,gp,-32764
     600:	0000ee40 	call	ee4 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
     604:	01100034 	movhi	r4,16384
     608:	21003204 	addi	r4,r4,200
     60c:	20800a17 	ldw	r2,40(r4)
     610:	10c00017 	ldw	r3,0(r2)
     614:	18c003cc 	andi	r3,r3,15
     618:	20c00b15 	stw	r3,44(r4)
     61c:	10c00017 	ldw	r3,0(r2)
     620:	1807d13a 	srai	r3,r3,4
     624:	18c0004c 	andi	r3,r3,1
     628:	20c00c15 	stw	r3,48(r4)
     62c:	10c00017 	ldw	r3,0(r2)
     630:	1807d17a 	srai	r3,r3,5
     634:	18c0004c 	andi	r3,r3,1
     638:	20c00d15 	stw	r3,52(r4)
     63c:	10c0008f 	ldh	r3,2(r2)
     640:	18c003cc 	andi	r3,r3,15
     644:	20c00e15 	stw	r3,56(r4)
     648:	10c00017 	ldw	r3,0(r2)
     64c:	1807d53a 	srai	r3,r3,20
     650:	18c0004c 	andi	r3,r3,1
     654:	20c00f15 	stw	r3,60(r4)
     658:	10800017 	ldw	r2,0(r2)
     65c:	1005d57a 	srai	r2,r2,21
     660:	1080004c 	andi	r2,r2,1
     664:	20801015 	stw	r2,64(r4)
     668:	d1600104 	addi	r5,gp,-32764
     66c:	0000ee40 	call	ee4 <alt_dev_llist_insert>
}
     670:	dfc00017 	ldw	ra,0(sp)
     674:	dec00104 	addi	sp,sp,4
     678:	f800283a 	ret
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
     67c:	10803fcc 	andi	r2,r2,255
     680:	10800468 	cmpgeui	r2,r2,17
     684:	1000081e 	bne	r2,zero,6a8 <alt_sys_init+0x2a8>
     688:	00c00084 	movi	r3,2
     68c:	00900034 	movhi	r2,16384
     690:	10c06a15 	stw	r3,424(r2)
     694:	20c00317 	ldw	r3,12(r4)
     698:	1805d43a 	srai	r2,r3,16
     69c:	1806d63a 	srli	r3,r3,24
     6a0:	02000044 	movi	r8,1
     6a4:	003f9306 	br	4f4 <alt_sys_init+0xf4>
     6a8:	00c00104 	movi	r3,4
     6ac:	00900034 	movhi	r2,16384
     6b0:	10c06a15 	stw	r3,424(r2)
     6b4:	20c00317 	ldw	r3,12(r4)
     6b8:	1805d43a 	srai	r2,r3,16
     6bc:	1806d63a 	srli	r3,r3,24
     6c0:	02000084 	movi	r8,2
     6c4:	003f8b06 	br	4f4 <alt_sys_init+0xf4>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     6c8:	10803fcc 	andi	r2,r2,255
     6cc:	10800468 	cmpgeui	r2,r2,17
     6d0:	1000081e 	bne	r2,zero,6f4 <alt_sys_init+0x2f4>
     6d4:	00c00084 	movi	r3,2
     6d8:	00900034 	movhi	r2,16384
     6dc:	10c05315 	stw	r3,332(r2)
     6e0:	20c00317 	ldw	r3,12(r4)
     6e4:	1805d43a 	srai	r2,r3,16
     6e8:	1806d63a 	srli	r3,r3,24
     6ec:	02000044 	movi	r8,1
     6f0:	003fb406 	br	5c4 <alt_sys_init+0x1c4>
     6f4:	00c00104 	movi	r3,4
     6f8:	00900034 	movhi	r2,16384
     6fc:	10c05315 	stw	r3,332(r2)
     700:	20c00317 	ldw	r3,12(r4)
     704:	1805d43a 	srai	r2,r3,16
     708:	1806d63a 	srli	r3,r3,24
     70c:	02000084 	movi	r8,2
     710:	003fac06 	br	5c4 <alt_sys_init+0x1c4>

00000714 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     714:	deffff04 	addi	sp,sp,-4
     718:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     71c:	20800017 	ldw	r2,0(r4)
     720:	21c00217 	ldw	r7,8(r4)
     724:	11000a04 	addi	r4,r2,40
     728:	0000a180 	call	a18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     72c:	dfc00017 	ldw	ra,0(sp)
     730:	dec00104 	addi	sp,sp,4
     734:	f800283a 	ret

00000738 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     738:	deffff04 	addi	sp,sp,-4
     73c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     740:	20800017 	ldw	r2,0(r4)
     744:	21c00217 	ldw	r7,8(r4)
     748:	11000a04 	addi	r4,r2,40
     74c:	0000b700 	call	b70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     750:	dfc00017 	ldw	ra,0(sp)
     754:	dec00104 	addi	sp,sp,4
     758:	f800283a 	ret

0000075c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     75c:	deffff04 	addi	sp,sp,-4
     760:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     764:	20800017 	ldw	r2,0(r4)
     768:	21400217 	ldw	r5,8(r4)
     76c:	11000a04 	addi	r4,r2,40
     770:	000095c0 	call	95c <altera_avalon_jtag_uart_close>
}
     774:	dfc00017 	ldw	ra,0(sp)
     778:	dec00104 	addi	sp,sp,4
     77c:	f800283a 	ret

00000780 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     780:	deffff04 	addi	sp,sp,-4
     784:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     788:	21000017 	ldw	r4,0(r4)
     78c:	21000a04 	addi	r4,r4,40
     790:	00009940 	call	994 <altera_avalon_jtag_uart_ioctl>
}
     794:	dfc00017 	ldw	ra,0(sp)
     798:	dec00104 	addi	sp,sp,4
     79c:	f800283a 	ret

000007a0 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     7a0:	20800017 	ldw	r2,0(r4)
     7a4:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     7a8:	1081000c 	andi	r2,r2,1024
     7ac:	10000726 	beq	r2,zero,7cc <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     7b0:	20c00017 	ldw	r3,0(r4)
     7b4:	20800817 	ldw	r2,32(r4)
     7b8:	10810014 	ori	r2,r2,1024
     7bc:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
     7c0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     7c4:	d0a01117 	ldw	r2,-32700(gp)
     7c8:	f800283a 	ret
  else if (sp->host_inactive < INT_MAX - 2) {
     7cc:	20c00917 	ldw	r3,36(r4)
     7d0:	00a00034 	movhi	r2,32768
     7d4:	10bfff04 	addi	r2,r2,-4
     7d8:	10fffa36 	bltu	r2,r3,7c4 <altera_avalon_jtag_uart_timeout+0x24>
    sp->host_inactive++;
     7dc:	18c00044 	addi	r3,r3,1
     7e0:	20c00915 	stw	r3,36(r4)
    if (sp->host_inactive >= sp->timeout) {
     7e4:	003ff706 	br	7c4 <altera_avalon_jtag_uart_timeout+0x24>

000007e8 <altera_avalon_jtag_uart_irq>:
  unsigned int base = sp->base;
     7e8:	21c00017 	ldw	r7,0(r4)
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7ec:	023fff84 	movi	r8,-2
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     7f0:	027fff44 	movi	r9,-3
     7f4:	00000706 	br	814 <altera_avalon_jtag_uart_irq+0x2c>
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7f8:	20800817 	ldw	r2,32(r4)
     7fc:	1204703a 	and	r2,r2,r8
     800:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     804:	38800135 	stwio	r2,4(r7)
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     808:	38800137 	ldwio	r2,4(r7)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     80c:	2880800c 	andi	r2,r5,512
     810:	10001c1e 	bne	r2,zero,884 <altera_avalon_jtag_uart_irq+0x9c>
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     814:	39400137 	ldwio	r5,4(r7)
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     818:	2880c00c 	andi	r2,r5,768
     81c:	10003126 	beq	r2,zero,8e4 <altera_avalon_jtag_uart_irq+0xfc>
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     820:	2880400c 	andi	r2,r5,256
     824:	103ff926 	beq	r2,zero,80c <altera_avalon_jtag_uart_irq+0x24>
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     828:	20800a17 	ldw	r2,40(r4)
     82c:	10800044 	addi	r2,r2,1
     830:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     834:	20c00b17 	ldw	r3,44(r4)
     838:	10ffef26 	beq	r2,r3,7f8 <altera_avalon_jtag_uart_irq+0x10>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     83c:	38c00037 	ldwio	r3,0(r7)
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     840:	18a0000c 	andi	r2,r3,32768
     844:	10000c26 	beq	r2,zero,878 <altera_avalon_jtag_uart_irq+0x90>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     848:	20800a17 	ldw	r2,40(r4)
     84c:	2085883a 	add	r2,r4,r2
     850:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     854:	20800a17 	ldw	r2,40(r4)
     858:	10800044 	addi	r2,r2,1
     85c:	1081ffcc 	andi	r2,r2,2047
     860:	20800a15 	stw	r2,40(r4)
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     864:	20800a17 	ldw	r2,40(r4)
     868:	10800044 	addi	r2,r2,1
     86c:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     870:	21800b17 	ldw	r6,44(r4)
     874:	30bff11e 	bne	r6,r2,83c <altera_avalon_jtag_uart_irq+0x54>
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     878:	18ffffec 	andhi	r3,r3,65535
     87c:	183fe326 	beq	r3,zero,80c <altera_avalon_jtag_uart_irq+0x24>
     880:	003fdd06 	br	7f8 <altera_avalon_jtag_uart_irq+0x10>
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     884:	280ad43a 	srli	r5,r5,16
      while (space > 0 && sp->tx_out != sp->tx_in)
     888:	283fe226 	beq	r5,zero,814 <altera_avalon_jtag_uart_irq+0x2c>
     88c:	20c00d17 	ldw	r3,52(r4)
     890:	20800c17 	ldw	r2,48(r4)
     894:	18800b26 	beq	r3,r2,8c4 <altera_avalon_jtag_uart_irq+0xdc>
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     898:	20800d17 	ldw	r2,52(r4)
     89c:	2085883a 	add	r2,r4,r2
     8a0:	10820e07 	ldb	r2,2104(r2)
     8a4:	38800035 	stwio	r2,0(r7)
        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8a8:	20800d17 	ldw	r2,52(r4)
     8ac:	10800044 	addi	r2,r2,1
     8b0:	1081ffcc 	andi	r2,r2,2047
     8b4:	20800d15 	stw	r2,52(r4)
        space--;
     8b8:	297fffc4 	addi	r5,r5,-1
      while (space > 0 && sp->tx_out != sp->tx_in)
     8bc:	283ff31e 	bne	r5,zero,88c <altera_avalon_jtag_uart_irq+0xa4>
     8c0:	003fd406 	br	814 <altera_avalon_jtag_uart_irq+0x2c>
      if (space > 0)
     8c4:	283fd326 	beq	r5,zero,814 <altera_avalon_jtag_uart_irq+0x2c>
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     8c8:	20800817 	ldw	r2,32(r4)
     8cc:	1244703a 	and	r2,r2,r9
     8d0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     8d4:	20c00017 	ldw	r3,0(r4)
     8d8:	18800135 	stwio	r2,4(r3)
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8dc:	38800137 	ldwio	r2,4(r7)
     8e0:	003fcc06 	br	814 <altera_avalon_jtag_uart_irq+0x2c>
}
     8e4:	f800283a 	ret

000008e8 <altera_avalon_jtag_uart_init>:
{
     8e8:	defffe04 	addi	sp,sp,-8
     8ec:	dfc00115 	stw	ra,4(sp)
     8f0:	dc000015 	stw	r16,0(sp)
     8f4:	2021883a 	mov	r16,r4
     8f8:	3009883a 	mov	r4,r6
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     8fc:	00800044 	movi	r2,1
     900:	80800815 	stw	r2,32(r16)
  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     904:	80c00017 	ldw	r3,0(r16)
     908:	18800135 	stwio	r2,4(r3)
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     90c:	01800034 	movhi	r6,0
     910:	3181fa04 	addi	r6,r6,2024
     914:	800b883a 	mov	r5,r16
     918:	00010480 	call	1048 <alt_irq_register>
  sp->host_inactive = 0;
     91c:	80000915 	stw	zero,36(r16)
  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     920:	800f883a 	mov	r7,r16
     924:	01800034 	movhi	r6,0
     928:	3181e804 	addi	r6,r6,1952
     92c:	d1601117 	ldw	r5,-32700(gp)
     930:	81000204 	addi	r4,r16,8
     934:	0000d900 	call	d90 <alt_alarm_start>
     938:	10000416 	blt	r2,zero,94c <altera_avalon_jtag_uart_init+0x64>
}
     93c:	dfc00117 	ldw	ra,4(sp)
     940:	dc000017 	ldw	r16,0(sp)
     944:	dec00204 	addi	sp,sp,8
     948:	f800283a 	ret
    sp->timeout = INT_MAX;
     94c:	00a00034 	movhi	r2,32768
     950:	10bfffc4 	addi	r2,r2,-1
     954:	80800115 	stw	r2,4(r16)
}
     958:	003ff806 	br	93c <altera_avalon_jtag_uart_init+0x54>

0000095c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     95c:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
     960:	2950000c 	andi	r5,r5,16384
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     964:	20800d17 	ldw	r2,52(r4)
     968:	11800826 	beq	r2,r6,98c <altera_avalon_jtag_uart_close+0x30>
     96c:	20c00917 	ldw	r3,36(r4)
     970:	20800117 	ldw	r2,4(r4)
     974:	1880032e 	bgeu	r3,r2,984 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
     978:	283ffa26 	beq	r5,zero,964 <altera_avalon_jtag_uart_close+0x8>
      return -EWOULDBLOCK; 
     97c:	00bffd44 	movi	r2,-11
     980:	f800283a 	ret
    }
  }

  return 0;
     984:	0005883a 	mov	r2,zero
     988:	f800283a 	ret
     98c:	0005883a 	mov	r2,zero
}
     990:	f800283a 	ret

00000994 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     994:	289a8060 	cmpeqi	r2,r5,27137
     998:	1000041e 	bne	r2,zero,9ac <altera_avalon_jtag_uart_ioctl+0x18>
     99c:	295a80a0 	cmpeqi	r5,r5,27138
     9a0:	2800101e 	bne	r5,zero,9e4 <altera_avalon_jtag_uart_ioctl+0x50>
     9a4:	00bff9c4 	movi	r2,-25
     9a8:	f800283a 	ret
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     9ac:	20c00117 	ldw	r3,4(r4)
     9b0:	00a00034 	movhi	r2,32768
     9b4:	10bfffc4 	addi	r2,r2,-1
     9b8:	18801326 	beq	r3,r2,a08 <altera_avalon_jtag_uart_ioctl+0x74>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     9bc:	30800017 	ldw	r2,0(r6)
     9c0:	117fff84 	addi	r5,r2,-2
     9c4:	00e00034 	movhi	r3,32768
     9c8:	18ffff04 	addi	r3,r3,-4
     9cc:	1940022e 	bgeu	r3,r5,9d8 <altera_avalon_jtag_uart_ioctl+0x44>
     9d0:	00a00034 	movhi	r2,32768
     9d4:	10bfff84 	addi	r2,r2,-2
     9d8:	20800115 	stw	r2,4(r4)
      rc = 0;
     9dc:	0005883a 	mov	r2,zero
     9e0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     9e4:	20c00117 	ldw	r3,4(r4)
     9e8:	00a00034 	movhi	r2,32768
     9ec:	10bfffc4 	addi	r2,r2,-1
     9f0:	18800726 	beq	r3,r2,a10 <altera_avalon_jtag_uart_ioctl+0x7c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     9f4:	20800917 	ldw	r2,36(r4)
     9f8:	10c5803a 	cmpltu	r2,r2,r3
     9fc:	30800015 	stw	r2,0(r6)
      rc = 0;
     a00:	0005883a 	mov	r2,zero
     a04:	f800283a 	ret
  int rc = -ENOTTY;
     a08:	00bff9c4 	movi	r2,-25
     a0c:	f800283a 	ret
     a10:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     a14:	f800283a 	ret

00000a18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     a18:	defff504 	addi	sp,sp,-44
     a1c:	dfc00a15 	stw	ra,40(sp)
     a20:	df000915 	stw	fp,36(sp)
     a24:	ddc00815 	stw	r23,32(sp)
     a28:	dd800715 	stw	r22,28(sp)
     a2c:	dd400615 	stw	r21,24(sp)
     a30:	dd000515 	stw	r20,20(sp)
     a34:	dcc00415 	stw	r19,16(sp)
     a38:	dc800315 	stw	r18,12(sp)
     a3c:	dc400215 	stw	r17,8(sp)
     a40:	dc000115 	stw	r16,4(sp)
     a44:	2023883a 	mov	r17,r4
     a48:	2839883a 	mov	fp,r5
     a4c:	d9c00015 	stw	r7,0(sp)
  char * ptr = buffer;
     a50:	2829883a 	mov	r20,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     a54:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     a58:	25800e04 	addi	r22,r4,56
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
     a5c:	00002106 	br	ae4 <altera_avalon_jtag_uart_read+0xcc>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     a60:	bc05c83a 	sub	r2,r23,r16
     a64:	00000e06 	br	aa0 <altera_avalon_jtag_uart_read+0x88>
      memcpy(ptr, sp->rx_buf + out, n);
     a68:	900d883a 	mov	r6,r18
     a6c:	b40b883a 	add	r5,r22,r16
     a70:	a009883a 	mov	r4,r20
     a74:	00016380 	call	1638 <memcpy>
      ptr   += n;
     a78:	a4a9883a 	add	r20,r20,r18
      space -= n;
     a7c:	ac8dc83a 	sub	r6,r21,r18

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     a80:	84a1883a 	add	r16,r16,r18
     a84:	8401ffcc 	andi	r16,r16,2047
     a88:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
     a8c:	01800a0e 	bge	zero,r6,ab8 <altera_avalon_jtag_uart_read+0xa0>
      in  = sp->rx_in;
     a90:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
     a94:	8c000b17 	ldw	r16,44(r17)
      if (in >= out)
     a98:	9c3ff136 	bltu	r19,r16,a60 <altera_avalon_jtag_uart_read+0x48>
        n = in - out;
     a9c:	9c05c83a 	sub	r2,r19,r16
      if (n == 0)
     aa0:	10000526 	beq	r2,zero,ab8 <altera_avalon_jtag_uart_read+0xa0>
      if (n > space)
     aa4:	302b883a 	mov	r21,r6
     aa8:	3025883a 	mov	r18,r6
     aac:	11bfee2e 	bgeu	r2,r6,a68 <altera_avalon_jtag_uart_read+0x50>
     ab0:	1025883a 	mov	r18,r2
     ab4:	003fec06 	br	a68 <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
     ab8:	a7000c1e 	bne	r20,fp,aec <altera_avalon_jtag_uart_read+0xd4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     abc:	d8800017 	ldw	r2,0(sp)
     ac0:	1090000c 	andi	r2,r2,16384
     ac4:	1000201e 	bne	r2,zero,b48 <altera_avalon_jtag_uart_read+0x130>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     ac8:	88800a17 	ldw	r2,40(r17)
     acc:	14c0031e 	bne	r2,r19,adc <altera_avalon_jtag_uart_read+0xc4>
     ad0:	88c00917 	ldw	r3,36(r17)
     ad4:	88800117 	ldw	r2,4(r17)
     ad8:	18bffb36 	bltu	r3,r2,ac8 <altera_avalon_jtag_uart_read+0xb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     adc:	88800a17 	ldw	r2,40(r17)
     ae0:	14c01b26 	beq	r2,r19,b50 <altera_avalon_jtag_uart_read+0x138>
  while (space > 0)
     ae4:	01bfea16 	blt	zero,r6,a90 <altera_avalon_jtag_uart_read+0x78>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     ae8:	a7001b26 	beq	r20,fp,b58 <altera_avalon_jtag_uart_read+0x140>
  NIOS2_READ_STATUS (context);
     aec:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     af0:	00bfff84 	movi	r2,-2
     af4:	1884703a 	and	r2,r3,r2
     af8:	1001703a 	wrctl	status,r2
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     afc:	88800817 	ldw	r2,32(r17)
     b00:	10800054 	ori	r2,r2,1
     b04:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     b08:	89000017 	ldw	r4,0(r17)
     b0c:	20800135 	stwio	r2,4(r4)
  NIOS2_WRITE_STATUS (context);
     b10:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     b14:	a705c83a 	sub	r2,r20,fp
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     b18:	dfc00a17 	ldw	ra,40(sp)
     b1c:	df000917 	ldw	fp,36(sp)
     b20:	ddc00817 	ldw	r23,32(sp)
     b24:	dd800717 	ldw	r22,28(sp)
     b28:	dd400617 	ldw	r21,24(sp)
     b2c:	dd000517 	ldw	r20,20(sp)
     b30:	dcc00417 	ldw	r19,16(sp)
     b34:	dc800317 	ldw	r18,12(sp)
     b38:	dc400217 	ldw	r17,8(sp)
     b3c:	dc000117 	ldw	r16,4(sp)
     b40:	dec00b04 	addi	sp,sp,44
     b44:	f800283a 	ret
    return -EWOULDBLOCK;
     b48:	00bffd44 	movi	r2,-11
     b4c:	003ff206 	br	b18 <altera_avalon_jtag_uart_read+0x100>
    return -EIO;
     b50:	00bffec4 	movi	r2,-5
     b54:	003ff006 	br	b18 <altera_avalon_jtag_uart_read+0x100>
  else if (flags & O_NONBLOCK)
     b58:	d8800017 	ldw	r2,0(sp)
     b5c:	10d0000c 	andi	r3,r2,16384
    return -EWOULDBLOCK;
     b60:	00bffd44 	movi	r2,-11
  else if (flags & O_NONBLOCK)
     b64:	183fec1e 	bne	r3,zero,b18 <altera_avalon_jtag_uart_read+0x100>
    return -EIO;
     b68:	00bffec4 	movi	r2,-5
     b6c:	003fea06 	br	b18 <altera_avalon_jtag_uart_read+0x100>

00000b70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     b70:	defff404 	addi	sp,sp,-48
     b74:	dfc00b15 	stw	ra,44(sp)
     b78:	df000a15 	stw	fp,40(sp)
     b7c:	ddc00915 	stw	r23,36(sp)
     b80:	dd800815 	stw	r22,32(sp)
     b84:	dd400715 	stw	r21,28(sp)
     b88:	dd000615 	stw	r20,24(sp)
     b8c:	dcc00515 	stw	r19,20(sp)
     b90:	dc800415 	stw	r18,16(sp)
     b94:	dc400315 	stw	r17,12(sp)
     b98:	dc000215 	stw	r16,8(sp)
     b9c:	2021883a 	mov	r16,r4
     ba0:	d9400015 	stw	r5,0(sp)
     ba4:	d9c00115 	stw	r7,4(sp)
     ba8:	2827883a 	mov	r19,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     bac:	0701ffc4 	movi	fp,2047
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     bb0:	05c20004 	movi	r23,2048
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
     bb4:	3d50000c 	andi	r21,r7,16384
      memcpy(sp->tx_buf + in, ptr, n);
     bb8:	25820e04 	addi	r22,r4,2104
     bbc:	00001506 	br	c14 <altera_avalon_jtag_uart_write+0xa4>
      else if (out > 0)
     bc0:	20000226 	beq	r4,zero,bcc <altera_avalon_jtag_uart_write+0x5c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     bc4:	bc45c83a 	sub	r2,r23,r17
     bc8:	00001806 	br	c2c <altera_avalon_jtag_uart_write+0xbc>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     bcc:	e445c83a 	sub	r2,fp,r17
     bd0:	00001606 	br	c2c <altera_avalon_jtag_uart_write+0xbc>
      if (n > count)
     bd4:	3029883a 	mov	r20,r6
     bd8:	3025883a 	mov	r18,r6
     bdc:	1180012e 	bgeu	r2,r6,be4 <altera_avalon_jtag_uart_write+0x74>
     be0:	1025883a 	mov	r18,r2
      memcpy(sp->tx_buf + in, ptr, n);
     be4:	900d883a 	mov	r6,r18
     be8:	980b883a 	mov	r5,r19
     bec:	b449883a 	add	r4,r22,r17
     bf0:	00016380 	call	1638 <memcpy>
      ptr   += n;
     bf4:	9ca7883a 	add	r19,r19,r18
      count -= n;
     bf8:	a48dc83a 	sub	r6,r20,r18
      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     bfc:	8ca3883a 	add	r17,r17,r18
     c00:	8c41ffcc 	andi	r17,r17,2047
     c04:	84400c15 	stw	r17,48(r16)
     c08:	00000206 	br	c14 <altera_avalon_jtag_uart_write+0xa4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     c0c:	80800917 	ldw	r2,36(r16)
     c10:	10002c1e 	bne	r2,zero,cc4 <altera_avalon_jtag_uart_write+0x154>
    while (count > 0)
     c14:	01802f0e 	bge	zero,r6,cd4 <altera_avalon_jtag_uart_write+0x164>
      in  = sp->tx_in;
     c18:	84400c17 	ldw	r17,48(r16)
      out = sp->tx_out;
     c1c:	81000d17 	ldw	r4,52(r16)
      if (in < out)
     c20:	893fe72e 	bgeu	r17,r4,bc0 <altera_avalon_jtag_uart_write+0x50>
        n = out - 1 - in;
     c24:	20bfffc4 	addi	r2,r4,-1
     c28:	1445c83a 	sub	r2,r2,r17
      if (n == 0)
     c2c:	103fe91e 	bne	r2,zero,bd4 <altera_avalon_jtag_uart_write+0x64>
  NIOS2_READ_STATUS (context);
     c30:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c34:	00bfff84 	movi	r2,-2
     c38:	1884703a 	and	r2,r3,r2
     c3c:	1001703a 	wrctl	status,r2
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     c40:	80800817 	ldw	r2,32(r16)
     c44:	10800094 	ori	r2,r2,2
     c48:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c4c:	81400017 	ldw	r5,0(r16)
     c50:	28800135 	stwio	r2,4(r5)
  NIOS2_WRITE_STATUS (context);
     c54:	1801703a 	wrctl	status,r3
      if (flags & O_NONBLOCK)
     c58:	a800081e 	bne	r21,zero,c7c <altera_avalon_jtag_uart_write+0x10c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     c5c:	80800d17 	ldw	r2,52(r16)
     c60:	113fea1e 	bne	r2,r4,c0c <altera_avalon_jtag_uart_write+0x9c>
     c64:	80c00917 	ldw	r3,36(r16)
     c68:	80800117 	ldw	r2,4(r16)
     c6c:	18bffb36 	bltu	r3,r2,c5c <altera_avalon_jtag_uart_write+0xec>
     c70:	003fe606 	br	c0c <altera_avalon_jtag_uart_write+0x9c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     c74:	00bffd44 	movi	r2,-11
     c78:	00000406 	br	c8c <altera_avalon_jtag_uart_write+0x11c>
  if (ptr != start)
     c7c:	d8800017 	ldw	r2,0(sp)
     c80:	98800e26 	beq	r19,r2,cbc <altera_avalon_jtag_uart_write+0x14c>
    return ptr - start;
     c84:	d8800017 	ldw	r2,0(sp)
     c88:	9885c83a 	sub	r2,r19,r2
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
     c8c:	dfc00b17 	ldw	ra,44(sp)
     c90:	df000a17 	ldw	fp,40(sp)
     c94:	ddc00917 	ldw	r23,36(sp)
     c98:	dd800817 	ldw	r22,32(sp)
     c9c:	dd400717 	ldw	r21,28(sp)
     ca0:	dd000617 	ldw	r20,24(sp)
     ca4:	dcc00517 	ldw	r19,20(sp)
     ca8:	dc800417 	ldw	r18,16(sp)
     cac:	dc400317 	ldw	r17,12(sp)
     cb0:	dc000217 	ldw	r16,8(sp)
     cb4:	dec00c04 	addi	sp,sp,48
     cb8:	f800283a 	ret
    return -EWOULDBLOCK;
     cbc:	00bffd44 	movi	r2,-11
     cc0:	003ff206 	br	c8c <altera_avalon_jtag_uart_write+0x11c>
  if (ptr != start)
     cc4:	d8800017 	ldw	r2,0(sp)
     cc8:	98bfee1e 	bne	r19,r2,c84 <altera_avalon_jtag_uart_write+0x114>
    return -EIO; /* Host not connected */
     ccc:	00bffec4 	movi	r2,-5
     cd0:	003fee06 	br	c8c <altera_avalon_jtag_uart_write+0x11c>
  NIOS2_READ_STATUS (context);
     cd4:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cd8:	00bfff84 	movi	r2,-2
     cdc:	1884703a 	and	r2,r3,r2
     ce0:	1001703a 	wrctl	status,r2
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     ce4:	80800817 	ldw	r2,32(r16)
     ce8:	10800094 	ori	r2,r2,2
     cec:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     cf0:	81000017 	ldw	r4,0(r16)
     cf4:	20800135 	stwio	r2,4(r4)
  NIOS2_WRITE_STATUS (context);
     cf8:	1801703a 	wrctl	status,r3
  if (ptr != start)
     cfc:	d8800017 	ldw	r2,0(sp)
     d00:	98bfe01e 	bne	r19,r2,c84 <altera_avalon_jtag_uart_write+0x114>
  else if (flags & O_NONBLOCK)
     d04:	d8800117 	ldw	r2,4(sp)
     d08:	1090000c 	andi	r2,r2,16384
     d0c:	103fd91e 	bne	r2,zero,c74 <altera_avalon_jtag_uart_write+0x104>
    return -EIO; /* Host not connected */
     d10:	00bffec4 	movi	r2,-5
     d14:	003fdd06 	br	c8c <altera_avalon_jtag_uart_write+0x11c>

00000d18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     d18:	defffe04 	addi	sp,sp,-8
     d1c:	dfc00115 	stw	ra,4(sp)
     d20:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     d24:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     d28:	20800137 	ldwio	r2,4(r4)
  NIOS2_READ_STATUS (context);
     d2c:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d30:	00bfff84 	movi	r2,-2
     d34:	8084703a 	and	r2,r16,r2
     d38:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
     d3c:	00012b80 	call	12b8 <alt_tick>
  NIOS2_WRITE_STATUS (context);
     d40:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
     d44:	dfc00117 	ldw	ra,4(sp)
     d48:	dc000017 	ldw	r16,0(sp)
     d4c:	dec00204 	addi	sp,sp,8
     d50:	f800283a 	ret

00000d54 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     d54:	deffff04 	addi	sp,sp,-4
     d58:	dfc00015 	stw	ra,0(sp)
     d5c:	200b883a 	mov	r5,r4
     d60:	3009883a 	mov	r4,r6
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     d64:	d0a01117 	ldw	r2,-32700(gp)
     d68:	1000011e 	bne	r2,zero,d70 <alt_avalon_timer_sc_init+0x1c>
  {
    _alt_tick_rate = nticks;
     d6c:	d1e01115 	stw	r7,-32700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     d70:	008001c4 	movi	r2,7
     d74:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
     d78:	01800034 	movhi	r6,0
     d7c:	31834604 	addi	r6,r6,3352
     d80:	00010480 	call	1048 <alt_irq_register>
#endif  
}
     d84:	dfc00017 	ldw	ra,0(sp)
     d88:	dec00104 	addi	sp,sp,4
     d8c:	f800283a 	ret

00000d90 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
  
  if (alt_ticks_per_second ())
     d90:	d0a01117 	ldw	r2,-32700(gp)
     d94:	10001a26 	beq	r2,zero,e00 <alt_alarm_start+0x70>
  {
    if (alarm)
     d98:	20001b26 	beq	r4,zero,e08 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
     d9c:	21800415 	stw	r6,16(r4)
      alarm->context  = context;
     da0:	21c00515 	stw	r7,20(r4)
  NIOS2_READ_STATUS (context);
     da4:	000d303a 	rdctl	r6,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     da8:	00bfff84 	movi	r2,-2
     dac:	3084703a 	and	r2,r6,r2
     db0:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     db4:	d0e00f17 	ldw	r3,-32708(gp)
     db8:	d1e01017 	ldw	r7,-32704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
     dbc:	18800044 	addi	r2,r3,1
     dc0:	10c7803a 	cmpltu	r3,r2,r3
     dc4:	19c7883a 	add	r3,r3,r7
     dc8:	114b883a 	add	r5,r2,r5
     dcc:	2885803a 	cmpltu	r2,r5,r2
     dd0:	10c5883a 	add	r2,r2,r3
     dd4:	21400215 	stw	r5,8(r4)
     dd8:	20800315 	stw	r2,12(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     ddc:	d0a00704 	addi	r2,gp,-32740
     de0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
     de4:	d0a00717 	ldw	r2,-32740(gp)
     de8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
     dec:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     df0:	d1200715 	stw	r4,-32740(gp)
  NIOS2_WRITE_STATUS (context);
     df4:	3001703a 	wrctl	status,r6
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
     df8:	0005883a 	mov	r2,zero
     dfc:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
     e00:	00bfde84 	movi	r2,-134
     e04:	f800283a 	ret
      return -EINVAL;
     e08:	00bffa84 	movi	r2,-22
  }
}
     e0c:	f800283a 	ret

00000e10 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     e10:	defffd04 	addi	sp,sp,-12
     e14:	dfc00215 	stw	ra,8(sp)
     e18:	dc400115 	stw	r17,4(sp)
     e1c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     e20:	20002016 	blt	r4,zero,ea4 <close+0x94>
     e24:	2021883a 	mov	r16,r4
     e28:	21000324 	muli	r4,r4,12
     e2c:	00900034 	movhi	r2,16384
     e30:	1084a004 	addi	r2,r2,4736
     e34:	2089883a 	add	r4,r4,r2

  if (fd)
     e38:	20001a26 	beq	r4,zero,ea4 <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     e3c:	80c00324 	muli	r3,r16,12
     e40:	00900034 	movhi	r2,16384
     e44:	1885883a 	add	r2,r3,r2
     e48:	1084a017 	ldw	r2,4736(r2)
     e4c:	10800417 	ldw	r2,16(r2)
     e50:	10001d26 	beq	r2,zero,ec8 <close+0xb8>
     e54:	103ee83a 	callr	r2
     e58:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     e5c:	8009883a 	mov	r4,r16
     e60:	00012600 	call	1260 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     e64:	0005883a 	mov	r2,zero
    if (rval < 0)
     e68:	88000516 	blt	r17,zero,e80 <close+0x70>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     e6c:	dfc00217 	ldw	ra,8(sp)
     e70:	dc400117 	ldw	r17,4(sp)
     e74:	dc000017 	ldw	r16,0(sp)
     e78:	dec00304 	addi	sp,sp,12
     e7c:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     e80:	d0a00517 	ldw	r2,-32748(gp)
     e84:	10000526 	beq	r2,zero,e9c <close+0x8c>
     e88:	103ee83a 	callr	r2
      ALT_ERRNO = -rval;
     e8c:	0463c83a 	sub	r17,zero,r17
     e90:	14400015 	stw	r17,0(r2)
      return -1;
     e94:	00bfffc4 	movi	r2,-1
     e98:	003ff406 	br	e6c <close+0x5c>
     e9c:	d0a01304 	addi	r2,gp,-32692
     ea0:	003ffa06 	br	e8c <close+0x7c>
     ea4:	d0a00517 	ldw	r2,-32748(gp)
     ea8:	10000526 	beq	r2,zero,ec0 <close+0xb0>
     eac:	103ee83a 	callr	r2
    ALT_ERRNO = EBADFD;
     eb0:	00c01444 	movi	r3,81
     eb4:	10c00015 	stw	r3,0(r2)
    return -1;
     eb8:	00bfffc4 	movi	r2,-1
     ebc:	003feb06 	br	e6c <close+0x5c>
     ec0:	d0a01304 	addi	r2,gp,-32692
     ec4:	003ffa06 	br	eb0 <close+0xa0>
    alt_release_fd (fildes);
     ec8:	8009883a 	mov	r4,r16
     ecc:	00012600 	call	1260 <alt_release_fd>
    return 0;
     ed0:	0005883a 	mov	r2,zero
     ed4:	003fe506 	br	e6c <close+0x5c>

00000ed8 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     ed8:	f800283a 	ret

00000edc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
     edc:	3005883a 	mov	r2,r6
  return len;
}
     ee0:	f800283a 	ret

00000ee4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     ee4:	20000926 	beq	r4,zero,f0c <alt_dev_llist_insert+0x28>
     ee8:	20800217 	ldw	r2,8(r4)
     eec:	10000726 	beq	r2,zero,f0c <alt_dev_llist_insert+0x28>
  entry->previous = list;
     ef0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
     ef4:	28800017 	ldw	r2,0(r5)
     ef8:	20800015 	stw	r2,0(r4)
  list->next->previous = entry;
     efc:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     f00:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
     f04:	0005883a 	mov	r2,zero
     f08:	f800283a 	ret
     f0c:	d0a00517 	ldw	r2,-32748(gp)
     f10:	10000926 	beq	r2,zero,f38 <alt_dev_llist_insert+0x54>
{
     f14:	deffff04 	addi	sp,sp,-4
     f18:	dfc00015 	stw	ra,0(sp)
     f1c:	103ee83a 	callr	r2
    ALT_ERRNO = EINVAL;
     f20:	00c00584 	movi	r3,22
     f24:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     f28:	00bffa84 	movi	r2,-22
}
     f2c:	dfc00017 	ldw	ra,0(sp)
     f30:	dec00104 	addi	sp,sp,4
     f34:	f800283a 	ret
     f38:	d0a01304 	addi	r2,gp,-32692
    ALT_ERRNO = EINVAL;
     f3c:	00c00584 	movi	r3,22
     f40:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     f44:	00bffa84 	movi	r2,-22
}
     f48:	f800283a 	ret

00000f4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
     f4c:	deffff04 	addi	sp,sp,-4
     f50:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
     f54:	01440004 	movi	r5,4096
     f58:	0009883a 	mov	r4,zero
     f5c:	00015140 	call	1514 <alt_icache_flush>
#endif
}
     f60:	dfc00017 	ldw	ra,0(sp)
     f64:	dec00104 	addi	sp,sp,4
     f68:	f800283a 	ret

00000f6c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
     f6c:	defffe04 	addi	sp,sp,-8
     f70:	dfc00115 	stw	ra,4(sp)
     f74:	dc000015 	stw	r16,0(sp)
     f78:	2021883a 	mov	r16,r4
     f7c:	2809883a 	mov	r4,r5
     f80:	300b883a 	mov	r5,r6
     f84:	380d883a 	mov	r6,r7
  int old;

  old = open (name, flags, mode);
     f88:	00010f40 	call	10f4 <open>

  if (old >= 0)
     f8c:	1000040e 	bge	r2,zero,fa0 <alt_open_fd+0x34>
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
     f90:	dfc00117 	ldw	ra,4(sp)
     f94:	dc000017 	ldw	r16,0(sp)
     f98:	dec00204 	addi	sp,sp,8
     f9c:	f800283a 	ret
     fa0:	1009883a 	mov	r4,r2
    fd->dev      = alt_fd_list[old].dev;
     fa4:	00900034 	movhi	r2,16384
     fa8:	1084a004 	addi	r2,r2,4736
     fac:	20c00324 	muli	r3,r4,12
     fb0:	10c5883a 	add	r2,r2,r3
     fb4:	10c00017 	ldw	r3,0(r2)
     fb8:	80c00015 	stw	r3,0(r16)
    fd->priv     = alt_fd_list[old].priv;
     fbc:	10c00117 	ldw	r3,4(r2)
     fc0:	80c00115 	stw	r3,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
     fc4:	10800217 	ldw	r2,8(r2)
     fc8:	80800215 	stw	r2,8(r16)
    alt_release_fd (old);
     fcc:	00012600 	call	1260 <alt_release_fd>
} 
     fd0:	003fef06 	br	f90 <alt_open_fd+0x24>

00000fd4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     fd4:	defffd04 	addi	sp,sp,-12
     fd8:	dfc00215 	stw	ra,8(sp)
     fdc:	dc400115 	stw	r17,4(sp)
     fe0:	dc000015 	stw	r16,0(sp)
     fe4:	2823883a 	mov	r17,r5
     fe8:	3021883a 	mov	r16,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     fec:	01c07fc4 	movi	r7,511
     ff0:	01800044 	movi	r6,1
     ff4:	200b883a 	mov	r5,r4
     ff8:	01100034 	movhi	r4,16384
     ffc:	2104a304 	addi	r4,r4,4748
    1000:	0000f6c0 	call	f6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1004:	01c07fc4 	movi	r7,511
    1008:	000d883a 	mov	r6,zero
    100c:	880b883a 	mov	r5,r17
    1010:	01100034 	movhi	r4,16384
    1014:	2104a004 	addi	r4,r4,4736
    1018:	0000f6c0 	call	f6c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    101c:	01c07fc4 	movi	r7,511
    1020:	01800044 	movi	r6,1
    1024:	800b883a 	mov	r5,r16
    1028:	01100034 	movhi	r4,16384
    102c:	2104a604 	addi	r4,r4,4760
    1030:	0000f6c0 	call	f6c <alt_open_fd>
}  
    1034:	dfc00217 	ldw	ra,8(sp)
    1038:	dc400117 	ldw	r17,4(sp)
    103c:	dc000017 	ldw	r16,0(sp)
    1040:	dec00304 	addi	sp,sp,12
    1044:	f800283a 	ret

00001048 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1048:	20800828 	cmpgeui	r2,r4,32
    104c:	1000271e 	bne	r2,zero,10ec <alt_irq_register+0xa4>
  NIOS2_READ_STATUS (context);
    1050:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1054:	00bfff84 	movi	r2,-2
    1058:	1884703a 	and	r2,r3,r2
    105c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    1060:	00900034 	movhi	r2,16384
    1064:	10862704 	addi	r2,r2,6300
    1068:	200e90fa 	slli	r7,r4,3
    106c:	11c5883a 	add	r2,r2,r7
    1070:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    1074:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    1078:	30000f26 	beq	r6,zero,10b8 <alt_irq_register+0x70>
  NIOS2_READ_STATUS (context);
    107c:	000b303a 	rdctl	r5,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1080:	00bfff84 	movi	r2,-2
    1084:	2884703a 	and	r2,r5,r2
    1088:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    108c:	d1a00e17 	ldw	r6,-32712(gp)
    1090:	00800044 	movi	r2,1
    1094:	1104983a 	sll	r2,r2,r4
    1098:	1184b03a 	or	r2,r2,r6
    109c:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    10a0:	d0a00e17 	ldw	r2,-32712(gp)
    10a4:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    10a8:	2801703a 	wrctl	status,r5
    10ac:	1801703a 	wrctl	status,r3
    10b0:	0005883a 	mov	r2,zero
}
    10b4:	f800283a 	ret
  NIOS2_READ_STATUS (context);
    10b8:	000b303a 	rdctl	r5,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    10bc:	00bfff84 	movi	r2,-2
    10c0:	2884703a 	and	r2,r5,r2
    10c4:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    10c8:	d1a00e17 	ldw	r6,-32712(gp)
    10cc:	00bfff84 	movi	r2,-2
    10d0:	1104183a 	rol	r2,r2,r4
    10d4:	1184703a 	and	r2,r2,r6
    10d8:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    10dc:	d0a00e17 	ldw	r2,-32712(gp)
    10e0:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    10e4:	2801703a 	wrctl	status,r5
  return 0;
    10e8:	003ff006 	br	10ac <alt_irq_register+0x64>
  int rc = -EINVAL;  
    10ec:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
    10f0:	f800283a 	ret

000010f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    10f4:	defffa04 	addi	sp,sp,-24
    10f8:	dfc00515 	stw	ra,20(sp)
    10fc:	dd000415 	stw	r20,16(sp)
    1100:	dcc00315 	stw	r19,12(sp)
    1104:	dc800215 	stw	r18,8(sp)
    1108:	dc400115 	stw	r17,4(sp)
    110c:	dc000015 	stw	r16,0(sp)
    1110:	2027883a 	mov	r19,r4
    1114:	2825883a 	mov	r18,r5
    1118:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    111c:	d1600104 	addi	r5,gp,-32764
    1120:	00013800 	call	1380 <alt_find_dev>
    1124:	10000f26 	beq	r2,zero,1164 <open+0x70>
    1128:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    112c:	1009883a 	mov	r4,r2
    1130:	00014c80 	call	14c8 <alt_get_fd>
    1134:	1021883a 	mov	r16,r2
    1138:	10003c0e 	bge	r2,zero,122c <open+0x138>
    113c:	8023883a 	mov	r17,r16

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    1140:	8009883a 	mov	r4,r16
    1144:	00012600 	call	1260 <alt_release_fd>
    1148:	d0a00517 	ldw	r2,-32748(gp)
    114c:	10003326 	beq	r2,zero,121c <open+0x128>
    1150:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    1154:	0463c83a 	sub	r17,zero,r17
    1158:	14400015 	stw	r17,0(r2)
    return -1;
    115c:	043fffc4 	movi	r16,-1
    1160:	00001806 	br	11c4 <open+0xd0>
    dev   = alt_find_file (file);
    1164:	9809883a 	mov	r4,r19
    1168:	00013f80 	call	13f8 <alt_find_file>
    116c:	1023883a 	mov	r17,r2
  if (dev)
    1170:	10001d26 	beq	r2,zero,11e8 <open+0xf4>
    if ((index = alt_get_fd (dev)) < 0)
    1174:	1009883a 	mov	r4,r2
    1178:	00014c80 	call	14c8 <alt_get_fd>
    117c:	1021883a 	mov	r16,r2
    1180:	10002816 	blt	r2,zero,1224 <open+0x130>
      fd = &alt_fd_list[index];
    1184:	81000324 	muli	r4,r16,12
    1188:	00900034 	movhi	r2,16384
    118c:	1084a004 	addi	r2,r2,4736
    1190:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1194:	00900034 	movhi	r2,16384
    1198:	10bfffc4 	addi	r2,r2,-1
    119c:	9084703a 	and	r2,r18,r2
    11a0:	20800215 	stw	r2,8(r4)
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    11a4:	88800317 	ldw	r2,12(r17)
    11a8:	10000626 	beq	r2,zero,11c4 <open+0xd0>
    11ac:	a00f883a 	mov	r7,r20
    11b0:	900d883a 	mov	r6,r18
    11b4:	980b883a 	mov	r5,r19
    11b8:	103ee83a 	callr	r2
    11bc:	1023883a 	mov	r17,r2
  if (status < 0)
    11c0:	103fdf16 	blt	r2,zero,1140 <open+0x4c>
  }
  
  /* return the reference upon success */

  return index;
}
    11c4:	8005883a 	mov	r2,r16
    11c8:	dfc00517 	ldw	ra,20(sp)
    11cc:	dd000417 	ldw	r20,16(sp)
    11d0:	dcc00317 	ldw	r19,12(sp)
    11d4:	dc800217 	ldw	r18,8(sp)
    11d8:	dc400117 	ldw	r17,4(sp)
    11dc:	dc000017 	ldw	r16,0(sp)
    11e0:	dec00604 	addi	sp,sp,24
    11e4:	f800283a 	ret
    status = -ENODEV;
    11e8:	047ffb44 	movi	r17,-19
  int index  = -1;
    11ec:	043fffc4 	movi	r16,-1
    11f0:	003fd306 	br	1140 <open+0x4c>
  for (i = 0; i <= alt_max_fd; i++)
    11f4:	42000044 	addi	r8,r8,1
    11f8:	18c00304 	addi	r3,r3,12
    11fc:	3a3fe936 	bltu	r7,r8,11a4 <open+0xb0>
    if ((alt_fd_list[i].dev == fd->dev) &&
    1200:	18800017 	ldw	r2,0(r3)
    1204:	11bffb1e 	bne	r2,r6,11f4 <open+0x100>
    1208:	18800217 	ldw	r2,8(r3)
    120c:	103ff90e 	bge	r2,zero,11f4 <open+0x100>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1210:	193ff826 	beq	r3,r4,11f4 <open+0x100>
      return -EACCES;
    1214:	047ffcc4 	movi	r17,-13
    1218:	003fc906 	br	1140 <open+0x4c>
    121c:	d0a01304 	addi	r2,gp,-32692
    1220:	003fcc06 	br	1154 <open+0x60>
    if ((index = alt_get_fd (dev)) < 0)
    1224:	8023883a 	mov	r17,r16
    1228:	003fc506 	br	1140 <open+0x4c>
      fd = &alt_fd_list[index];
    122c:	81000324 	muli	r4,r16,12
    1230:	00d00034 	movhi	r3,16384
    1234:	18c4a004 	addi	r3,r3,4736
    1238:	20c9883a 	add	r4,r4,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    123c:	00900034 	movhi	r2,16384
    1240:	10bfffc4 	addi	r2,r2,-1
    1244:	9084703a 	and	r2,r18,r2
  fd->fd_flags |= ALT_FD_DEV;
    1248:	10900034 	orhi	r2,r2,16384
    124c:	20800215 	stw	r2,8(r4)
  for (i = 0; i <= alt_max_fd; i++)
    1250:	d1e00017 	ldw	r7,-32768(gp)
    if ((alt_fd_list[i].dev == fd->dev) &&
    1254:	21800017 	ldw	r6,0(r4)
  for (i = 0; i <= alt_max_fd; i++)
    1258:	0011883a 	mov	r8,zero
    125c:	003fe806 	br	1200 <open+0x10c>

00001260 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    1260:	208000d0 	cmplti	r2,r4,3
    1264:	1000061e 	bne	r2,zero,1280 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    1268:	00900034 	movhi	r2,16384
    126c:	1084a004 	addi	r2,r2,4736
    1270:	21000324 	muli	r4,r4,12
    1274:	1105883a 	add	r2,r2,r4
    1278:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    127c:	10000015 	stw	zero,0(r2)
  }
}
    1280:	f800283a 	ret

00001284 <alt_alarm_stop>:
  NIOS2_READ_STATUS (context);
    1284:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1288:	00bfff84 	movi	r2,-2
    128c:	1884703a 	and	r2,r3,r2
    1290:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1294:	21400017 	ldw	r5,0(r4)
    1298:	20800117 	ldw	r2,4(r4)
    129c:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
    12a0:	21400017 	ldw	r5,0(r4)
    12a4:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    12a8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    12ac:	21000015 	stw	r4,0(r4)
  NIOS2_WRITE_STATUS (context);
    12b0:	1801703a 	wrctl	status,r3
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    12b4:	f800283a 	ret

000012b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    12b8:	defffc04 	addi	sp,sp,-16
    12bc:	dfc00315 	stw	ra,12(sp)
    12c0:	dc800215 	stw	r18,8(sp)
    12c4:	dc400115 	stw	r17,4(sp)
    12c8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    12cc:	d1200704 	addi	r4,gp,-32740
    12d0:	d4600717 	ldw	r17,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    12d4:	d0a00f17 	ldw	r2,-32708(gp)
    12d8:	d1601017 	ldw	r5,-32704(gp)
    12dc:	10c00044 	addi	r3,r2,1
    12e0:	1885803a 	cmpltu	r2,r3,r2
    12e4:	1145883a 	add	r2,r2,r5
    12e8:	d0e00f15 	stw	r3,-32708(gp)
    12ec:	d0a01015 	stw	r2,-32704(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    12f0:	89001b26 	beq	r17,r4,1360 <alt_tick+0xa8>
    12f4:	2025883a 	mov	r18,r4
    12f8:	00000c06 	br	132c <alt_tick+0x74>
    next = (alt_alarm*) alarm->llist.next;
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    {
      next_callback = alarm->callback (alarm->context);
    12fc:	80800417 	ldw	r2,16(r16)
    1300:	81000517 	ldw	r4,20(r16)
    1304:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1308:	10001226 	beq	r2,zero,1354 <alt_tick+0x9c>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    130c:	80c00217 	ldw	r3,8(r16)
    1310:	81000317 	ldw	r4,12(r16)
    1314:	10c7883a 	add	r3,r2,r3
    1318:	1885803a 	cmpltu	r2,r3,r2
    131c:	1105883a 	add	r2,r2,r4
    1320:	80c00215 	stw	r3,8(r16)
    1324:	80800315 	stw	r2,12(r16)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    1328:	8c800d26 	beq	r17,r18,1360 <alt_tick+0xa8>
    next = (alt_alarm*) alarm->llist.next;
    132c:	8821883a 	mov	r16,r17
    1330:	8c400017 	ldw	r17,0(r17)
    if (alarm->time <= _alt_nticks)
    1334:	d1200f17 	ldw	r4,-32708(gp)
    1338:	d0a01017 	ldw	r2,-32704(gp)
    133c:	80c00317 	ldw	r3,12(r16)
    1340:	10fff936 	bltu	r2,r3,1328 <alt_tick+0x70>
    1344:	18bfed1e 	bne	r3,r2,12fc <alt_tick+0x44>
    1348:	80800217 	ldw	r2,8(r16)
    134c:	20bff636 	bltu	r4,r2,1328 <alt_tick+0x70>
    1350:	003fea06 	br	12fc <alt_tick+0x44>
        alt_alarm_stop (alarm);
    1354:	8009883a 	mov	r4,r16
    1358:	00012840 	call	1284 <alt_alarm_stop>
    135c:	003ff206 	br	1328 <alt_tick+0x70>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1360:	dfc00317 	ldw	ra,12(sp)
    1364:	dc800217 	ldw	r18,8(sp)
    1368:	dc400117 	ldw	r17,4(sp)
    136c:	dc000017 	ldw	r16,0(sp)
    1370:	dec00404 	addi	sp,sp,16
    1374:	f800283a 	ret

00001378 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1378:	000170fa 	wrctl	ienable,zero
}
    137c:	f800283a 	ret

00001380 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1380:	defffb04 	addi	sp,sp,-20
    1384:	dfc00415 	stw	ra,16(sp)
    1388:	dcc00315 	stw	r19,12(sp)
    138c:	dc800215 	stw	r18,8(sp)
    1390:	dc400115 	stw	r17,4(sp)
    1394:	dc000015 	stw	r16,0(sp)
    1398:	2027883a 	mov	r19,r4
    139c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    13a0:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    13a4:	00017380 	call	1738 <strlen>
    13a8:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    13ac:	8c001026 	beq	r17,r16,13f0 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    13b0:	900d883a 	mov	r6,r18
    13b4:	980b883a 	mov	r5,r19
    13b8:	81000217 	ldw	r4,8(r16)
    13bc:	00015c00 	call	15c0 <memcmp>
    13c0:	10000326 	beq	r2,zero,13d0 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    13c4:	84000017 	ldw	r16,0(r16)
  while (next != (alt_dev*) llist)
    13c8:	8c3ff91e 	bne	r17,r16,13b0 <alt_find_dev+0x30>
  }
  
  /* No match found */
  
  return NULL;
    13cc:	0021883a 	mov	r16,zero
}
    13d0:	8005883a 	mov	r2,r16
    13d4:	dfc00417 	ldw	ra,16(sp)
    13d8:	dcc00317 	ldw	r19,12(sp)
    13dc:	dc800217 	ldw	r18,8(sp)
    13e0:	dc400117 	ldw	r17,4(sp)
    13e4:	dc000017 	ldw	r16,0(sp)
    13e8:	dec00504 	addi	sp,sp,20
    13ec:	f800283a 	ret
  return NULL;
    13f0:	0021883a 	mov	r16,zero
    13f4:	003ff606 	br	13d0 <alt_find_dev+0x50>

000013f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    13f8:	defffb04 	addi	sp,sp,-20
    13fc:	dfc00415 	stw	ra,16(sp)
    1400:	dcc00315 	stw	r19,12(sp)
    1404:	dc800215 	stw	r18,8(sp)
    1408:	dc400115 	stw	r17,4(sp)
    140c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1410:	d0a00304 	addi	r2,gp,-32756
    1414:	d4200317 	ldw	r16,-32756(gp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1418:	80802926 	beq	r16,r2,14c0 <alt_find_file+0xc8>
    141c:	2025883a 	mov	r18,r4
    1420:	1027883a 	mov	r19,r2
    1424:	00000806 	br	1448 <alt_find_file+0x50>
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    {
      len -= 1;
    1428:	10ffffc4 	addi	r3,r2,-1
    142c:	00000e06 	br	1468 <alt_find_file+0x70>
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    1430:	900b883a 	mov	r5,r18
    1434:	8809883a 	mov	r4,r17
    1438:	00015c00 	call	15c0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    143c:	10001826 	beq	r2,zero,14a0 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1440:	84000017 	ldw	r16,0(r16)
  while (next != (alt_dev*) &alt_fs_list)
    1444:	84c01526 	beq	r16,r19,149c <alt_find_file+0xa4>
    len = strlen(next->name);
    1448:	84400217 	ldw	r17,8(r16)
    144c:	8809883a 	mov	r4,r17
    1450:	00017380 	call	1738 <strlen>
    1454:	1007883a 	mov	r3,r2
    if (next->name[len-1] == '/')
    1458:	8889883a 	add	r4,r17,r2
    145c:	213fffc7 	ldb	r4,-1(r4)
    1460:	21000bd8 	cmpnei	r4,r4,47
    1464:	203ff026 	beq	r4,zero,1428 <alt_find_file+0x30>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    1468:	180d883a 	mov	r6,r3
    146c:	90c7883a 	add	r3,r18,r3
    1470:	18c00003 	ldbu	r3,0(r3)
    1474:	18803fcc 	andi	r2,r3,255
    1478:	1080201c 	xori	r2,r2,128
    147c:	10bfe004 	addi	r2,r2,-128
    1480:	10800be0 	cmpeqi	r2,r2,47
    1484:	103fea1e 	bne	r2,zero,1430 <alt_find_file+0x38>
    1488:	18c03fcc 	andi	r3,r3,255
    148c:	18c0201c 	xori	r3,r3,128
    1490:	18ffe004 	addi	r3,r3,-128
    1494:	183fea1e 	bne	r3,zero,1440 <alt_find_file+0x48>
    1498:	003fe506 	br	1430 <alt_find_file+0x38>
  }
  
  /* No match found */
  
  return NULL;     
    149c:	0021883a 	mov	r16,zero
}
    14a0:	8005883a 	mov	r2,r16
    14a4:	dfc00417 	ldw	ra,16(sp)
    14a8:	dcc00317 	ldw	r19,12(sp)
    14ac:	dc800217 	ldw	r18,8(sp)
    14b0:	dc400117 	ldw	r17,4(sp)
    14b4:	dc000017 	ldw	r16,0(sp)
    14b8:	dec00504 	addi	sp,sp,20
    14bc:	f800283a 	ret
  return NULL;     
    14c0:	0021883a 	mov	r16,zero
    14c4:	003ff606 	br	14a0 <alt_find_file+0xa8>

000014c8 <alt_get_fd>:
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    14c8:	00d00034 	movhi	r3,16384
    14cc:	18c4a004 	addi	r3,r3,4736
    14d0:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    14d4:	19400017 	ldw	r5,0(r3)
    14d8:	28000626 	beq	r5,zero,14f4 <alt_get_fd+0x2c>
  for (i = 0; i < ALT_MAX_FD; i++)
    14dc:	10800044 	addi	r2,r2,1
    14e0:	18c00304 	addi	r3,r3,12
    14e4:	11400818 	cmpnei	r5,r2,32
    14e8:	283ffa1e 	bne	r5,zero,14d4 <alt_get_fd+0xc>
  int rc = -EMFILE;
    14ec:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    14f0:	f800283a 	ret
      alt_fd_list[i].dev = dev;
    14f4:	11400324 	muli	r5,r2,12
    14f8:	00d00034 	movhi	r3,16384
    14fc:	28c7883a 	add	r3,r5,r3
    1500:	1904a015 	stw	r4,4736(r3)
      if (i > alt_max_fd)
    1504:	d0e00017 	ldw	r3,-32768(gp)
    1508:	18bff90e 	bge	r3,r2,14f0 <alt_get_fd+0x28>
        alt_max_fd = i;
    150c:	d0a00015 	stw	r2,-32768(gp)
    1510:	f800283a 	ret

00001514 <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    1514:	28840070 	cmpltui	r2,r5,4097
    1518:	1000011e 	bne	r2,zero,1520 <alt_icache_flush+0xc>
    151c:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    1520:	2147883a 	add	r3,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1524:	20c00e2e 	bgeu	r4,r3,1560 <alt_icache_flush+0x4c>
    1528:	2005883a 	mov	r2,r4
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    152c:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1530:	10800804 	addi	r2,r2,32
    1534:	10fffd36 	bltu	r2,r3,152c <alt_icache_flush+0x18>
    1538:	28bfffc4 	addi	r2,r5,-1
    153c:	1004d17a 	srli	r2,r2,5
    1540:	10800044 	addi	r2,r2,1
    1544:	1004917a 	slli	r2,r2,5
    1548:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    154c:	210007cc 	andi	r4,r4,31
    1550:	20000126 	beq	r4,zero,1558 <alt_icache_flush+0x44>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    1554:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    1558:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    155c:	f800283a 	ret
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1560:	2005883a 	mov	r2,r4
    1564:	003ff906 	br	154c <alt_icache_flush+0x38>

00001568 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1568:	213ffe84 	addi	r4,r4,-6
    156c:	20800428 	cmpgeui	r2,r4,16
    1570:	1000041e 	bne	r2,zero,1584 <alt_exception_cause_generated_bad_addr+0x1c>
    1574:	00a2c8d4 	movui	r2,35619
    1578:	1104d83a 	srl	r2,r2,r4
    157c:	1080004c 	andi	r2,r2,1
    1580:	f800283a 	ret
{
    1584:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
    1588:	f800283a 	ret

0000158c <exit>:
    158c:	defffe04 	addi	sp,sp,-8
    1590:	000b883a 	mov	r5,zero
    1594:	dc000015 	stw	r16,0(sp)
    1598:	dfc00115 	stw	ra,4(sp)
    159c:	2021883a 	mov	r16,r4
    15a0:	00017d00 	call	17d0 <__call_exitprocs>
    15a4:	00900034 	movhi	r2,16384
    15a8:	11061c17 	ldw	r4,6256(r2)
    15ac:	20800f17 	ldw	r2,60(r4)
    15b0:	10000126 	beq	r2,zero,15b8 <exit+0x2c>
    15b4:	103ee83a 	callr	r2
    15b8:	8009883a 	mov	r4,r16
    15bc:	00018f00 	call	18f0 <_exit>

000015c0 <memcmp>:
    15c0:	30800130 	cmpltui	r2,r6,4
    15c4:	10000b1e 	bne	r2,zero,15f4 <memcmp+0x34>
    15c8:	2144b03a 	or	r2,r4,r5
    15cc:	108000cc 	andi	r2,r2,3
    15d0:	1000171e 	bne	r2,zero,1630 <memcmp+0x70>
    15d4:	20c00017 	ldw	r3,0(r4)
    15d8:	28800017 	ldw	r2,0(r5)
    15dc:	1880141e 	bne	r3,r2,1630 <memcmp+0x70>
    15e0:	31bfff04 	addi	r6,r6,-4
    15e4:	30800128 	cmpgeui	r2,r6,4
    15e8:	21000104 	addi	r4,r4,4
    15ec:	29400104 	addi	r5,r5,4
    15f0:	103ff81e 	bne	r2,zero,15d4 <memcmp+0x14>
    15f4:	30bfffc4 	addi	r2,r6,-1
    15f8:	30000b26 	beq	r6,zero,1628 <memcmp+0x68>
    15fc:	11800044 	addi	r6,r2,1
    1600:	218d883a 	add	r6,r4,r6
    1604:	00000106 	br	160c <memcmp+0x4c>
    1608:	21800726 	beq	r4,r6,1628 <memcmp+0x68>
    160c:	20800003 	ldbu	r2,0(r4)
    1610:	28c00003 	ldbu	r3,0(r5)
    1614:	21000044 	addi	r4,r4,1
    1618:	29400044 	addi	r5,r5,1
    161c:	10fffa26 	beq	r2,r3,1608 <memcmp+0x48>
    1620:	10c5c83a 	sub	r2,r2,r3
    1624:	f800283a 	ret
    1628:	0005883a 	mov	r2,zero
    162c:	f800283a 	ret
    1630:	30bfffc4 	addi	r2,r6,-1
    1634:	003ff106 	br	15fc <memcmp+0x3c>

00001638 <memcpy>:
    1638:	30c00430 	cmpltui	r3,r6,16
    163c:	2005883a 	mov	r2,r4
    1640:	18002d1e 	bne	r3,zero,16f8 <memcpy+0xc0>
    1644:	2146b03a 	or	r3,r4,r5
    1648:	18c000cc 	andi	r3,r3,3
    164c:	1800351e 	bne	r3,zero,1724 <memcpy+0xec>
    1650:	32fffc04 	addi	r11,r6,-16
    1654:	5816d13a 	srli	r11,r11,4
    1658:	280f883a 	mov	r7,r5
    165c:	2007883a 	mov	r3,r4
    1660:	5ac00044 	addi	r11,r11,1
    1664:	5816913a 	slli	r11,r11,4
    1668:	22d5883a 	add	r10,r4,r11
    166c:	39000117 	ldw	r4,4(r7)
    1670:	3a400017 	ldw	r9,0(r7)
    1674:	3a000217 	ldw	r8,8(r7)
    1678:	19000115 	stw	r4,4(r3)
    167c:	39000317 	ldw	r4,12(r7)
    1680:	1a400015 	stw	r9,0(r3)
    1684:	1a000215 	stw	r8,8(r3)
    1688:	19000315 	stw	r4,12(r3)
    168c:	18c00404 	addi	r3,r3,16
    1690:	39c00404 	addi	r7,r7,16
    1694:	50fff51e 	bne	r10,r3,166c <memcpy+0x34>
    1698:	3100030c 	andi	r4,r6,12
    169c:	2acb883a 	add	r5,r5,r11
    16a0:	320003cc 	andi	r8,r6,15
    16a4:	20002226 	beq	r4,zero,1730 <memcpy+0xf8>
    16a8:	280f883a 	mov	r7,r5
    16ac:	1813883a 	mov	r9,r3
    16b0:	39c00104 	addi	r7,r7,4
    16b4:	3abfff17 	ldw	r10,-4(r7)
    16b8:	41c9c83a 	sub	r4,r8,r7
    16bc:	2909883a 	add	r4,r5,r4
    16c0:	4a800015 	stw	r10,0(r9)
    16c4:	21000128 	cmpgeui	r4,r4,4
    16c8:	4a400104 	addi	r9,r9,4
    16cc:	203ff81e 	bne	r4,zero,16b0 <memcpy+0x78>
    16d0:	413fff04 	addi	r4,r8,-4
    16d4:	2008d0ba 	srli	r4,r4,2
    16d8:	318000cc 	andi	r6,r6,3
    16dc:	31ffffc4 	addi	r7,r6,-1
    16e0:	21000044 	addi	r4,r4,1
    16e4:	200890ba 	slli	r4,r4,2
    16e8:	1907883a 	add	r3,r3,r4
    16ec:	290b883a 	add	r5,r5,r4
    16f0:	3000041e 	bne	r6,zero,1704 <memcpy+0xcc>
    16f4:	f800283a 	ret
    16f8:	2007883a 	mov	r3,r4
    16fc:	31ffffc4 	addi	r7,r6,-1
    1700:	303ffc26 	beq	r6,zero,16f4 <memcpy+0xbc>
    1704:	39c00044 	addi	r7,r7,1
    1708:	19cf883a 	add	r7,r3,r7
    170c:	29800003 	ldbu	r6,0(r5)
    1710:	18c00044 	addi	r3,r3,1
    1714:	29400044 	addi	r5,r5,1
    1718:	19bfffc5 	stb	r6,-1(r3)
    171c:	38fffb1e 	bne	r7,r3,170c <memcpy+0xd4>
    1720:	f800283a 	ret
    1724:	31ffffc4 	addi	r7,r6,-1
    1728:	2007883a 	mov	r3,r4
    172c:	003ff506 	br	1704 <memcpy+0xcc>
    1730:	400d883a 	mov	r6,r8
    1734:	003ff106 	br	16fc <memcpy+0xc4>

00001738 <strlen>:
    1738:	208000cc 	andi	r2,r4,3
    173c:	10000926 	beq	r2,zero,1764 <strlen+0x2c>
    1740:	2005883a 	mov	r2,r4
    1744:	00000306 	br	1754 <strlen+0x1c>
    1748:	10800044 	addi	r2,r2,1
    174c:	10c000cc 	andi	r3,r2,3
    1750:	18000526 	beq	r3,zero,1768 <strlen+0x30>
    1754:	10c00007 	ldb	r3,0(r2)
    1758:	183ffb1e 	bne	r3,zero,1748 <strlen+0x10>
    175c:	1105c83a 	sub	r2,r2,r4
    1760:	f800283a 	ret
    1764:	2005883a 	mov	r2,r4
    1768:	11400017 	ldw	r5,0(r2)
    176c:	01ffbff4 	movhi	r7,65279
    1770:	39ffbfc4 	addi	r7,r7,-257
    1774:	29c7883a 	add	r3,r5,r7
    1778:	01a02074 	movhi	r6,32897
    177c:	014a303a 	nor	r5,zero,r5
    1780:	1946703a 	and	r3,r3,r5
    1784:	31a02004 	addi	r6,r6,-32640
    1788:	1986703a 	and	r3,r3,r6
    178c:	1800071e 	bne	r3,zero,17ac <strlen+0x74>
    1790:	11400117 	ldw	r5,4(r2)
    1794:	10800104 	addi	r2,r2,4
    1798:	29c7883a 	add	r3,r5,r7
    179c:	014a303a 	nor	r5,zero,r5
    17a0:	1946703a 	and	r3,r3,r5
    17a4:	1986703a 	and	r3,r3,r6
    17a8:	183ff926 	beq	r3,zero,1790 <strlen+0x58>
    17ac:	10c00007 	ldb	r3,0(r2)
    17b0:	183fea26 	beq	r3,zero,175c <strlen+0x24>
    17b4:	10c00047 	ldb	r3,1(r2)
    17b8:	10800044 	addi	r2,r2,1
    17bc:	183fe726 	beq	r3,zero,175c <strlen+0x24>
    17c0:	10c00047 	ldb	r3,1(r2)
    17c4:	10800044 	addi	r2,r2,1
    17c8:	183ffa1e 	bne	r3,zero,17b4 <strlen+0x7c>
    17cc:	003fe306 	br	175c <strlen+0x24>

000017d0 <__call_exitprocs>:
    17d0:	defff704 	addi	sp,sp,-36
    17d4:	00900034 	movhi	r2,16384
    17d8:	dcc00315 	stw	r19,12(sp)
    17dc:	14c61c17 	ldw	r19,6256(r2)
    17e0:	dc800215 	stw	r18,8(sp)
    17e4:	dfc00815 	stw	ra,32(sp)
    17e8:	9c805217 	ldw	r18,328(r19)
    17ec:	ddc00715 	stw	r23,28(sp)
    17f0:	dd800615 	stw	r22,24(sp)
    17f4:	dd400515 	stw	r21,20(sp)
    17f8:	dd000415 	stw	r20,16(sp)
    17fc:	dc400115 	stw	r17,4(sp)
    1800:	dc000015 	stw	r16,0(sp)
    1804:	90001026 	beq	r18,zero,1848 <__call_exitprocs+0x78>
    1808:	202b883a 	mov	r21,r4
    180c:	282d883a 	mov	r22,r5
    1810:	05000044 	movi	r20,1
    1814:	94000117 	ldw	r16,4(r18)
    1818:	847fffc4 	addi	r17,r16,-1
    181c:	88000a16 	blt	r17,zero,1848 <__call_exitprocs+0x78>
    1820:	84000044 	addi	r16,r16,1
    1824:	802090ba 	slli	r16,r16,2
    1828:	9421883a 	add	r16,r18,r16
    182c:	b0001126 	beq	r22,zero,1874 <__call_exitprocs+0xa4>
    1830:	80804017 	ldw	r2,256(r16)
    1834:	15800f26 	beq	r2,r22,1874 <__call_exitprocs+0xa4>
    1838:	8c7fffc4 	addi	r17,r17,-1
    183c:	88bfffd8 	cmpnei	r2,r17,-1
    1840:	843fff04 	addi	r16,r16,-4
    1844:	103ff91e 	bne	r2,zero,182c <__call_exitprocs+0x5c>
    1848:	dfc00817 	ldw	ra,32(sp)
    184c:	ddc00717 	ldw	r23,28(sp)
    1850:	dd800617 	ldw	r22,24(sp)
    1854:	dd400517 	ldw	r21,20(sp)
    1858:	dd000417 	ldw	r20,16(sp)
    185c:	dcc00317 	ldw	r19,12(sp)
    1860:	dc800217 	ldw	r18,8(sp)
    1864:	dc400117 	ldw	r17,4(sp)
    1868:	dc000017 	ldw	r16,0(sp)
    186c:	dec00904 	addi	sp,sp,36
    1870:	f800283a 	ret
    1874:	90800117 	ldw	r2,4(r18)
    1878:	81800017 	ldw	r6,0(r16)
    187c:	10bfffc4 	addi	r2,r2,-1
    1880:	14401726 	beq	r2,r17,18e0 <__call_exitprocs+0x110>
    1884:	80000015 	stw	zero,0(r16)
    1888:	303feb26 	beq	r6,zero,1838 <__call_exitprocs+0x68>
    188c:	a446983a 	sll	r3,r20,r17
    1890:	90806217 	ldw	r2,392(r18)
    1894:	95c00117 	ldw	r23,4(r18)
    1898:	1884703a 	and	r2,r3,r2
    189c:	1000081e 	bne	r2,zero,18c0 <__call_exitprocs+0xf0>
    18a0:	303ee83a 	callr	r6
    18a4:	90c00117 	ldw	r3,4(r18)
    18a8:	98805217 	ldw	r2,328(r19)
    18ac:	1dc0011e 	bne	r3,r23,18b4 <__call_exitprocs+0xe4>
    18b0:	14bfe126 	beq	r2,r18,1838 <__call_exitprocs+0x68>
    18b4:	103fe426 	beq	r2,zero,1848 <__call_exitprocs+0x78>
    18b8:	1025883a 	mov	r18,r2
    18bc:	003fd506 	br	1814 <__call_exitprocs+0x44>
    18c0:	90806317 	ldw	r2,396(r18)
    18c4:	81002017 	ldw	r4,128(r16)
    18c8:	1886703a 	and	r3,r3,r2
    18cc:	1800061e 	bne	r3,zero,18e8 <__call_exitprocs+0x118>
    18d0:	200b883a 	mov	r5,r4
    18d4:	a809883a 	mov	r4,r21
    18d8:	303ee83a 	callr	r6
    18dc:	003ff106 	br	18a4 <__call_exitprocs+0xd4>
    18e0:	94400115 	stw	r17,4(r18)
    18e4:	003fe806 	br	1888 <__call_exitprocs+0xb8>
    18e8:	303ee83a 	callr	r6
    18ec:	003fed06 	br	18a4 <__call_exitprocs+0xd4>

000018f0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    18f0:	20000226 	beq	r4,zero,18fc <_exit+0xc>
    ALT_SIM_FAIL();
    18f4:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    18f8:	003fff06 	br	18f8 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
    18fc:	002af0b0 	cmpltui	zero,zero,43970
    1900:	003ffd06 	br	18f8 <_exit+0x8>
