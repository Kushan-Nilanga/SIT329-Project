
adc_demo.elf:     file format elf32-littlenios2
adc_demo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001a8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000199c memsz 0x0000199c flags r-x
    LOAD off    0x00003000 vaddr 0x40000000 paddr 0x000019bc align 2**12
         filesz 0x00001878 memsz 0x0000199c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000188  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001814  000001a8  000001a8  000011a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c8  40000000  000019bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017b0  400000c8  00001a84  000030c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  40001878  00003234  00004878  2**2
                  ALLOC, SMALL_DATA
  6 .Nios2_SRAM   00000000  00003234  00003234  00004878  2**0
                  CONTENTS
  7 .Nios2_2nd_Core_SRAM 00000000  00010000  00010000  00004878  2**0
                  CONTENTS
  8 .Onchip_SRAM  00000000  08000000  08000000  00004878  2**0
                  CONTENTS
  9 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00004878  2**0
                  CONTENTS
 10 .ARM_A9_HPS_axi_sdram 00000000  4000199c  4000199c  00004878  2**0
                  CONTENTS
 11 .comment      0000002d  00000000  00000000  00004878  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000550  00000000  00000000  000048a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00007fb6  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  0000cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000027fa  00000000  00000000  0000fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00000770  00000000  00000000  000126cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000014da  00000000  00000000  00012e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_alt_sim_info 00000020  00000000  00000000  00014318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000070  00000000  00000000  00014338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000015a7  00000000  00000000  000143a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000d64  00000000  00000000  0001594f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 000001bf  00000000  00000000  000166b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .thread_model 00000003  00000000  00000000  00018471  2**0
                  CONTENTS, READONLY
 24 .cpu          00000005  00000000  00000000  00018474  2**0
                  CONTENTS, READONLY
 25 .qsys         00000001  00000000  00000000  00018479  2**0
                  CONTENTS, READONLY
 26 .simulation_enabled 00000001  00000000  00000000  0001847a  2**0
                  CONTENTS, READONLY
 27 .sysid_hash   00000004  00000000  00000000  0001847b  2**0
                  CONTENTS, READONLY
 28 .sysid_base   00000004  00000000  00000000  0001847f  2**0
                  CONTENTS, READONLY
 29 .sysid_time   00000004  00000000  00000000  00018483  2**0
                  CONTENTS, READONLY
 30 .stderr_dev   00000009  00000000  00000000  00018487  2**0
                  CONTENTS, READONLY
 31 .stdin_dev    00000009  00000000  00000000  00018490  2**0
                  CONTENTS, READONLY
 32 .stdout_dev   00000009  00000000  00000000  00018499  2**0
                  CONTENTS, READONLY
 33 .sopc_system_name 0000000f  00000000  00000000  000184a2  2**0
                  CONTENTS, READONLY
 34 .jdi          00013216  00000000  00000000  000184b1  2**0
                  CONTENTS, READONLY
 35 .sopcinfo     00409e57  00000000  00000000  0002b6c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001a8 l    d  .text	00000000 .text
40000000 l    d  .rodata	00000000 .rodata
400000c8 l    d  .rwdata	00000000 .rwdata
40001878 l    d  .bss	00000000 .bss
00003234 l    d  .Nios2_SRAM	00000000 .Nios2_SRAM
00010000 l    d  .Nios2_2nd_Core_SRAM	00000000 .Nios2_2nd_Core_SRAM
08000000 l    d  .Onchip_SRAM	00000000 .Onchip_SRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
4000199c l    d  .ARM_A9_HPS_axi_sdram	00000000 .ARM_A9_HPS_axi_sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
000001e0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 adc_demo.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
40000220 l     O .rwdata	00001060 JTAG_UART
400001f4 l     O .rwdata	0000002c ADC
400001c4 l     O .rwdata	00000030 Audio_Subsystem_Audio
40000168 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
4000010c l     O .rwdata	0000005c VGA_Subsystem_VGA_Pixel_DMA
400000c8 l     O .rwdata	00000044 VGA_Subsystem_VGA_Pixel_RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000007a4 l     F .text	00000048 altera_avalon_jtag_uart_timeout
000007ec l     F .text	00000100 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000d1c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_adc.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000f94 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000109c l     F .text	00000068 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
40001428 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
40001894 g     O .bss	00000004 alt_instruction_exception_handler
00000394 g     F .text	00000050 alt_main
4000189c g     O .bss	00000100 alt_irq
00001a84 g       *ABS*	00000000 __flash_rwdata_start
000014a8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
40001898 g     O .bss	00000004 errno
4000187c g     O .bss	00000004 alt_argv
4000984c g       *ABS*	00000000 _gp
40001280 g     O .rwdata	00000180 alt_fd_list
00001004 g     F .text	00000078 alt_find_dev
000016f0 g     F .text	00000100 memcpy
00001104 g     F .text	00000074 alt_io_redirect
00001620 g     F .text	00000024 alt_exception_cause_generated_bad_addr
00000a1c g     F .text	00000158 altera_avalon_jtag_uart_read
000015cc g     F .text	00000054 alt_icache_flush
4000184c g     O .rwdata	00000004 alt_max_fd
00001178 g     F .text	000000ac alt_irq_register
40001870 g     O .rwdata	00000004 _global_impure_ptr
4000199c g       *ABS*	00000000 __bss_end
00000d94 g     F .text	0000001c alt_up_adc_open_dev
000013e8 g     F .text	000000c0 alt_tick
000013b4 g     F .text	00000034 alt_alarm_stop
40001884 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	0000006c alt_irq_handler
40001400 g     O .rwdata	00000028 alt_dev_null
00000f90 g     F .text	00000004 alt_dcache_flush_all
40001878 g       *ABS*	00000000 __ram_rwdata_end
40001850 g     O .rwdata	00000008 alt_dev_list
400000c8 g       *ABS*	00000000 __ram_rodata_end
40000000 g       *ABS*	00000000 __alt_mem_ARM_A9_HPS_axi_sdram
4000199c g       *ABS*	00000000 end
000008ec g     F .text	00000074 altera_avalon_jtag_uart_init
00000168 g     F .exceptions	00000040 alt_instruction_exception_entry
80000000 g       *ABS*	00000000 __alt_stack_pointer
00000d58 g     F .text	0000003c alt_avalon_timer_sc_init
00000b74 g     F .text	000001a8 altera_avalon_jtag_uart_write
00001888 g     F .text	00000120 __call_exitprocs
000001a8 g     F .text	0000003c _start
40001890 g     O .bss	00000004 _alt_tick_rate
40001888 g     O .bss	00000008 _alt_nticks
00000404 g     F .text	00000314 alt_sys_init
00000960 g     F .text	00000038 altera_avalon_jtag_uart_close
400000c8 g       *ABS*	00000000 __ram_rwdata_start
40000000 g       *ABS*	00000000 __ram_rodata_start
00000718 g     F .text	00000024 altera_avalon_jtag_uart_read_fd
00001580 g     F .text	0000004c alt_get_fd
00001678 g     F .text	00000078 memcmp
00000760 g     F .text	00000024 altera_avalon_jtag_uart_close_fd
4000199c g       *ABS*	00000000 __alt_stack_base
00000784 g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000014b0 g     F .text	000000d0 alt_find_file
00000f9c g     F .text	00000068 alt_dev_llist_insert
00010000 g       *ABS*	00000000 __alt_mem_Nios2_2nd_Core_SRAM
40001878 g       *ABS*	00000000 __bss_start
000001e4 g     F .text	00000098 main
40001878 g     O .bss	00000004 alt_envp
0000073c g     F .text	00000024 altera_avalon_jtag_uart_write_fd
40001860 g     O .rwdata	00000004 alt_errno
00000db0 g     F .text	00000098 alt_up_adc_read
000019bc g       *ABS*	00000000 __flash_rodata_start
000003e4 g     F .text	00000020 alt_irq_init
00001390 g     F .text	00000024 alt_release_fd
40001874 g     O .rwdata	00000004 _impure_ptr
40001880 g     O .bss	00000004 alt_argc
00000000 g       *ABS*	00000000 __alt_mem_Nios2_SRAM
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000020 g       .exceptions	00000000 alt_irq_entry
40001858 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
40001878 g       *ABS*	00000000 _edata
4000199c g       *ABS*	00000000 _end
000001a8 g       *ABS*	00000000 __ram_exceptions_end
00000998 g     F .text	00000084 altera_avalon_jtag_uart_ioctl
08000000 g       *ABS*	00000000 __alt_mem_Onchip_SRAM
00001644 g     F .text	00000034 exit
80000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000019a8 g     F .text	00000014 _exit
00000e48 g     F .text	00000080 alt_alarm_start
000017f0 g     F .text	00000098 strlen
00001224 g     F .text	0000016c open
0000107c g     F .text	00000020 alt_icache_flush_all
40001864 g     O .rwdata	00000004 alt_priority_mask
40001868 g     O .rwdata	00000008 alt_alarm_list
00000ec8 g     F .text	000000c8 close
0000027c g     F .text	00000118 alt_load



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406a14 	ori	at,at,424
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
  94:	e93fff04 	addi	r4,ea,-4
  98:	00001680 	call	168 <alt_instruction_exception_entry>
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>
  a0:	ebffff04 	addi	r15,ea,-4
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 10c:	04100034 	movhi	r16,16384
 110:	84062704 	addi	r16,r16,6300
 114:	00000806 	br	138 <alt_irq_handler+0x3c>
    i = 0;
 118:	000b883a 	mov	r5,zero
        alt_irq[i].handler(alt_irq[i].context, i); 
 11c:	280490fa 	slli	r2,r5,3
 120:	8085883a 	add	r2,r16,r2
 124:	10c00017 	ldw	r3,0(r2)
 128:	11000117 	ldw	r4,4(r2)
 12c:	183ee83a 	callr	r3
 130:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 134:	20000826 	beq	r4,zero,158 <alt_irq_handler+0x5c>
      if (active & mask)
 138:	2140004c 	andi	r5,r4,1
    mask = 1;
 13c:	00800044 	movi	r2,1
      if (active & mask)
 140:	283ff51e 	bne	r5,zero,118 <alt_irq_handler+0x1c>
      mask <<= 1;
 144:	1085883a 	add	r2,r2,r2
      i++;
 148:	29400044 	addi	r5,r5,1
      if (active & mask)
 14c:	2086703a 	and	r3,r4,r2
 150:	183ffc26 	beq	r3,zero,144 <alt_irq_handler+0x48>
 154:	003ff106 	br	11c <alt_irq_handler+0x20>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 158:	dfc00117 	ldw	ra,4(sp)
 15c:	dc000017 	ldw	r16,0(sp)
 160:	dec00204 	addi	sp,sp,8
 164:	f800283a 	ret

00000168 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 168:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 16c:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 170:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 174:	d0a01217 	ldw	r2,-32696(gp)
 178:	10000826 	beq	r2,zero,19c <alt_instruction_exception_entry+0x34>
{
 17c:	deffff04 	addi	sp,sp,-4
 180:	dfc00015 	stw	ra,0(sp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 184:	2008d0ba 	srli	r4,r4,2
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 188:	210007cc 	andi	r4,r4,31
 18c:	103ee83a 	callr	r2
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 190:	dfc00017 	ldw	ra,0(sp)
 194:	dec00104 	addi	sp,sp,4
 198:	f800283a 	ret
    NIOS2_BREAK();
 19c:	003da03a 	break	0
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1a0:	0005883a 	mov	r2,zero
}
 1a4:	f800283a 	ret

Disassembly of section .text:

000001a8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1a8:	06e00034 	movhi	sp,32768
    ori sp, sp, %lo(__alt_stack_pointer)
     1ac:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1b0:	06900034 	movhi	gp,16384
    ori gp, gp, %lo(_gp)
     1b4:	d6a61314 	ori	gp,gp,38988
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1b8:	00900034 	movhi	r2,16384
    ori r2, r2, %lo(__bss_start)
     1bc:	10861e14 	ori	r2,r2,6264

    movhi r3, %hi(__bss_end)
     1c0:	00d00034 	movhi	r3,16384
    ori r3, r3, %lo(__bss_end)
     1c4:	18c66714 	ori	r3,r3,6556

    beq r2, r3, 1f
     1c8:	10c00326 	beq	r2,r3,1d8 <_start+0x30>

0:
    stw zero, (r2)
     1cc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1d0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1d4:	10fffd36 	bltu	r2,r3,1cc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1d8:	000027c0 	call	27c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1dc:	00003940 	call	394 <alt_main>

000001e0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1e0:	003fff06 	br	1e0 <alt_after_alt_main>

000001e4 <main>:
#include "altera_up_avalon_adc.h"

int main (void){
     1e4:	defffb04 	addi	sp,sp,-20
     1e8:	dfc00415 	stw	ra,16(sp)
     1ec:	dcc00315 	stw	r19,12(sp)
     1f0:	dc800215 	stw	r18,8(sp)
     1f4:	dc400115 	stw	r17,4(sp)
     1f8:	dc000015 	stw	r16,0(sp)
    int count;
    int channel;
    data = 0;
    count = 0;
    channel = 0;
    adc = alt_up_adc_open_dev ("/dev/ADC");
     1fc:	01100034 	movhi	r4,16384
     200:	21000004 	addi	r4,r4,0
     204:	0000d940 	call	d94 <alt_up_adc_open_dev>
    while (adc!=NULL){
     208:	10001426 	beq	r2,zero,25c <main+0x78>
     20c:	1023883a 	mov	r17,r2
        alt_up_adc_update (adc);
     210:	10800a17 	ldw	r2,40(r2)
     214:	10000035 	stwio	zero,0(r2)
        count += 1;
        data = alt_up_adc_read (adc, channel);
     218:	000b883a 	mov	r5,zero
     21c:	8809883a 	mov	r4,r17
     220:	0000db00 	call	db0 <alt_up_adc_read>
    channel = 0;
     224:	0025883a 	mov	r18,zero
        count += 1;
     228:	04000044 	movi	r16,1
        data = data / 16;
        if (count==500000){
     22c:	04c00234 	movhi	r19,8
     230:	9ce84804 	addi	r19,r19,-24288
        alt_up_adc_update (adc);
     234:	88800a17 	ldw	r2,40(r17)
     238:	10000035 	stwio	zero,0(r2)
        count += 1;
     23c:	84000044 	addi	r16,r16,1
        data = alt_up_adc_read (adc, channel);
     240:	900b883a 	mov	r5,r18
     244:	8809883a 	mov	r4,r17
     248:	0000db00 	call	db0 <alt_up_adc_read>
        if (count==500000){
     24c:	84fff91e 	bne	r16,r19,234 <main+0x50>
            count = 0;
            channel = !channel;
     250:	9480005c 	xori	r18,r18,1
            count = 0;
     254:	0021883a 	mov	r16,zero
     258:	003ff606 	br	234 <main+0x50>
        }
    }
    return 0;
}
     25c:	0005883a 	mov	r2,zero
     260:	dfc00417 	ldw	ra,16(sp)
     264:	dcc00317 	ldw	r19,12(sp)
     268:	dc800217 	ldw	r18,8(sp)
     26c:	dc400117 	ldw	r17,4(sp)
     270:	dc000017 	ldw	r16,0(sp)
     274:	dec00504 	addi	sp,sp,20
     278:	f800283a 	ret

0000027c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     27c:	deffff04 	addi	sp,sp,-4
     280:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     284:	00d00034 	movhi	r3,16384
     288:	18c03204 	addi	r3,r3,200
     28c:	00800034 	movhi	r2,0
     290:	1086a104 	addi	r2,r2,6788
     294:	18801026 	beq	r3,r2,2d8 <alt_load+0x5c>
  {
    while( to != end )
     298:	00d00034 	movhi	r3,16384
     29c:	18c03204 	addi	r3,r3,200
     2a0:	00900034 	movhi	r2,16384
     2a4:	10861e04 	addi	r2,r2,6264
     2a8:	18800b26 	beq	r3,r2,2d8 <alt_load+0x5c>
     2ac:	00900034 	movhi	r2,16384
     2b0:	10803204 	addi	r2,r2,200
     2b4:	00c00034 	movhi	r3,0
     2b8:	18c6a104 	addi	r3,r3,6788
     2bc:	01500034 	movhi	r5,16384
     2c0:	29461e04 	addi	r5,r5,6264
    {
      *to++ = *from++;
     2c4:	18c00104 	addi	r3,r3,4
     2c8:	10800104 	addi	r2,r2,4
     2cc:	193fff17 	ldw	r4,-4(r3)
     2d0:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     2d4:	117ffb1e 	bne	r2,r5,2c4 <alt_load+0x48>
  if (to != from)
     2d8:	00c00034 	movhi	r3,0
     2dc:	18c00804 	addi	r3,r3,32
     2e0:	00800034 	movhi	r2,0
     2e4:	10800804 	addi	r2,r2,32
     2e8:	18801026 	beq	r3,r2,32c <alt_load+0xb0>
    while( to != end )
     2ec:	00c00034 	movhi	r3,0
     2f0:	18c00804 	addi	r3,r3,32
     2f4:	00800034 	movhi	r2,0
     2f8:	10806a04 	addi	r2,r2,424
     2fc:	18800b26 	beq	r3,r2,32c <alt_load+0xb0>
     300:	00800034 	movhi	r2,0
     304:	10800804 	addi	r2,r2,32
     308:	00c00034 	movhi	r3,0
     30c:	18c00804 	addi	r3,r3,32
     310:	01400034 	movhi	r5,0
     314:	29406a04 	addi	r5,r5,424
      *to++ = *from++;
     318:	18c00104 	addi	r3,r3,4
     31c:	10800104 	addi	r2,r2,4
     320:	193fff17 	ldw	r4,-4(r3)
     324:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     328:	117ffb1e 	bne	r2,r5,318 <alt_load+0x9c>
  if (to != from)
     32c:	00d00034 	movhi	r3,16384
     330:	18c00004 	addi	r3,r3,0
     334:	00800034 	movhi	r2,0
     338:	10866f04 	addi	r2,r2,6588
     33c:	18801026 	beq	r3,r2,380 <alt_load+0x104>
    while( to != end )
     340:	00d00034 	movhi	r3,16384
     344:	18c00004 	addi	r3,r3,0
     348:	00900034 	movhi	r2,16384
     34c:	10803204 	addi	r2,r2,200
     350:	18800b26 	beq	r3,r2,380 <alt_load+0x104>
     354:	00900034 	movhi	r2,16384
     358:	10800004 	addi	r2,r2,0
     35c:	00c00034 	movhi	r3,0
     360:	18c66f04 	addi	r3,r3,6588
     364:	01500034 	movhi	r5,16384
     368:	29403204 	addi	r5,r5,200
      *to++ = *from++;
     36c:	18c00104 	addi	r3,r3,4
     370:	10800104 	addi	r2,r2,4
     374:	193fff17 	ldw	r4,-4(r3)
     378:	113fff15 	stw	r4,-4(r2)
    while( to != end )
     37c:	117ffb1e 	bne	r2,r5,36c <alt_load+0xf0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     380:	0000f900 	call	f90 <alt_dcache_flush_all>
  alt_icache_flush_all();
     384:	000107c0 	call	107c <alt_icache_flush_all>
}
     388:	dfc00017 	ldw	ra,0(sp)
     38c:	dec00104 	addi	sp,sp,4
     390:	f800283a 	ret

00000394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     394:	defffe04 	addi	sp,sp,-8
     398:	dfc00115 	stw	ra,4(sp)
     39c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     3a0:	0009883a 	mov	r4,zero
     3a4:	00003e40 	call	3e4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     3a8:	00004040 	call	404 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     3ac:	01900034 	movhi	r6,16384
     3b0:	31800304 	addi	r6,r6,12
     3b4:	300b883a 	mov	r5,r6
     3b8:	3009883a 	mov	r4,r6
     3bc:	00011040 	call	1104 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     3c0:	d1a00b17 	ldw	r6,-32724(gp)
     3c4:	d1600c17 	ldw	r5,-32720(gp)
     3c8:	d1200d17 	ldw	r4,-32716(gp)
     3cc:	00001e40 	call	1e4 <main>
     3d0:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     3d4:	01000044 	movi	r4,1
     3d8:	0000ec80 	call	ec8 <close>
  exit (result);
     3dc:	8009883a 	mov	r4,r16
     3e0:	00016440 	call	1644 <exit>

000003e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     3e4:	deffff04 	addi	sp,sp,-4
     3e8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
     3ec:	00014a80 	call	14a8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     3f0:	00800044 	movi	r2,1
     3f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     3f8:	dfc00017 	ldw	ra,0(sp)
     3fc:	dec00104 	addi	sp,sp,4
     400:	f800283a 	ret

00000404 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     404:	deffff04 	addi	sp,sp,-4
     408:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     40c:	01c00204 	movi	r7,8
     410:	000d883a 	mov	r6,zero
     414:	000b883a 	mov	r5,zero
     418:	013fc834 	movhi	r4,65312
     41c:	21080004 	addi	r4,r4,8192
     420:	0000d580 	call	d58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     424:	01800204 	movi	r6,8
     428:	000b883a 	mov	r5,zero
     42c:	01100034 	movhi	r4,16384
     430:	21009204 	addi	r4,r4,584
     434:	00008ec0 	call	8ec <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     438:	d1600104 	addi	r5,gp,-32764
     43c:	01100034 	movhi	r4,16384
     440:	21008804 	addi	r4,r4,544
     444:	0000f9c0 	call	f9c <alt_dev_llist_insert>
     448:	d1600104 	addi	r5,gp,-32764
     44c:	01100034 	movhi	r4,16384
     450:	21007d04 	addi	r4,r4,500
     454:	0000f9c0 	call	f9c <alt_dev_llist_insert>
     458:	d1600104 	addi	r5,gp,-32764
     45c:	01100034 	movhi	r4,16384
     460:	21007104 	addi	r4,r4,452
     464:	0000f9c0 	call	f9c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
    ALTERA_UP_AVALON_ADC_INIT ( ADC, ADC);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
     468:	00d00034 	movhi	r3,16384
     46c:	18c05a04 	addi	r3,r3,360
     470:	19000a17 	ldw	r4,40(r3)
     474:	20800017 	ldw	r2,0(r4)
     478:	18800b15 	stw	r2,44(r3)
     47c:	20800117 	ldw	r2,4(r4)
     480:	18800c15 	stw	r2,48(r3)
     484:	2080020b 	ldhu	r2,8(r4)
     488:	18801115 	stw	r2,68(r3)
     48c:	2080028b 	ldhu	r2,10(r4)
     490:	18801215 	stw	r2,72(r3)
     494:	20800317 	ldw	r2,12(r4)
     498:	1005d07a 	srai	r2,r2,1
     49c:	1080004c 	andi	r2,r2,1
     4a0:	18800d15 	stw	r2,52(r3)
     4a4:	20800317 	ldw	r2,12(r4)
     4a8:	1005d23a 	srai	r2,r2,8
     4ac:	108003cc 	andi	r2,r2,15
     4b0:	10800044 	addi	r2,r2,1
     4b4:	18800e15 	stw	r2,56(r3)
     4b8:	21400317 	ldw	r5,12(r4)
     4bc:	280bd1ba 	srai	r5,r5,6
     4c0:	294000cc 	andi	r5,r5,3
     4c4:	29400044 	addi	r5,r5,1
     4c8:	19400f15 	stw	r5,60(r3)
     4cc:	1145383a 	mul	r2,r2,r5
     4d0:	10c03fcc 	andi	r3,r2,255
     4d4:	18c00268 	cmpgeui	r3,r3,9
     4d8:	1800691e 	bne	r3,zero,680 <alt_sys_init+0x27c>
     4dc:	00c00044 	movi	r3,1
     4e0:	00900034 	movhi	r2,16384
     4e4:	10c06a15 	stw	r3,424(r2)
     4e8:	20c00317 	ldw	r3,12(r4)
     4ec:	1805d43a 	srai	r2,r3,16
     4f0:	1806d63a 	srli	r3,r3,24
     4f4:	0011883a 	mov	r8,zero
     4f8:	01100034 	movhi	r4,16384
     4fc:	21005a04 	addi	r4,r4,360
     500:	22001315 	stw	r8,76(r4)
     504:	10803fcc 	andi	r2,r2,255
     508:	01800804 	movi	r6,32
     50c:	308fc83a 	sub	r7,r6,r2
     510:	017fffc4 	movi	r5,-1
     514:	29ced83a 	srl	r7,r5,r7
     518:	21c01415 	stw	r7,80(r4)
     51c:	1205883a 	add	r2,r2,r8
     520:	20801515 	stw	r2,84(r4)
     524:	30cdc83a 	sub	r6,r6,r3
     528:	298ad83a 	srl	r5,r5,r6
     52c:	21401615 	stw	r5,88(r4)
     530:	d1600104 	addi	r5,gp,-32764
     534:	0000f9c0 	call	f9c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     538:	00d00034 	movhi	r3,16384
     53c:	18c04304 	addi	r3,r3,268
     540:	19000a17 	ldw	r4,40(r3)
     544:	20800017 	ldw	r2,0(r4)
     548:	18800b15 	stw	r2,44(r3)
     54c:	20800117 	ldw	r2,4(r4)
     550:	18800c15 	stw	r2,48(r3)
     554:	2080020b 	ldhu	r2,8(r4)
     558:	18801115 	stw	r2,68(r3)
     55c:	2080028b 	ldhu	r2,10(r4)
     560:	18801215 	stw	r2,72(r3)
     564:	20800317 	ldw	r2,12(r4)
     568:	1005d07a 	srai	r2,r2,1
     56c:	1080004c 	andi	r2,r2,1
     570:	18800d15 	stw	r2,52(r3)
     574:	20800317 	ldw	r2,12(r4)
     578:	1005d23a 	srai	r2,r2,8
     57c:	108003cc 	andi	r2,r2,15
     580:	10800044 	addi	r2,r2,1
     584:	18800e15 	stw	r2,56(r3)
     588:	21400317 	ldw	r5,12(r4)
     58c:	280bd1ba 	srai	r5,r5,6
     590:	294000cc 	andi	r5,r5,3
     594:	29400044 	addi	r5,r5,1
     598:	19400f15 	stw	r5,60(r3)
     59c:	1145383a 	mul	r2,r2,r5
     5a0:	10c03fcc 	andi	r3,r2,255
     5a4:	18c00268 	cmpgeui	r3,r3,9
     5a8:	1800481e 	bne	r3,zero,6cc <alt_sys_init+0x2c8>
     5ac:	00c00044 	movi	r3,1
     5b0:	00900034 	movhi	r2,16384
     5b4:	10c05315 	stw	r3,332(r2)
     5b8:	20c00317 	ldw	r3,12(r4)
     5bc:	1805d43a 	srai	r2,r3,16
     5c0:	1806d63a 	srli	r3,r3,24
     5c4:	0011883a 	mov	r8,zero
     5c8:	01100034 	movhi	r4,16384
     5cc:	21004304 	addi	r4,r4,268
     5d0:	22001315 	stw	r8,76(r4)
     5d4:	10803fcc 	andi	r2,r2,255
     5d8:	01800804 	movi	r6,32
     5dc:	308fc83a 	sub	r7,r6,r2
     5e0:	017fffc4 	movi	r5,-1
     5e4:	29ced83a 	srl	r7,r5,r7
     5e8:	21c01415 	stw	r7,80(r4)
     5ec:	1205883a 	add	r2,r2,r8
     5f0:	20801515 	stw	r2,84(r4)
     5f4:	30cdc83a 	sub	r6,r6,r3
     5f8:	298ad83a 	srl	r5,r5,r6
     5fc:	21401615 	stw	r5,88(r4)
     600:	d1600104 	addi	r5,gp,-32764
     604:	0000f9c0 	call	f9c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_RGB_RESAMPLER, VGA_Subsystem_VGA_Pixel_RGB_Resampler);
     608:	01100034 	movhi	r4,16384
     60c:	21003204 	addi	r4,r4,200
     610:	20800a17 	ldw	r2,40(r4)
     614:	10c00017 	ldw	r3,0(r2)
     618:	18c003cc 	andi	r3,r3,15
     61c:	20c00b15 	stw	r3,44(r4)
     620:	10c00017 	ldw	r3,0(r2)
     624:	1807d13a 	srai	r3,r3,4
     628:	18c0004c 	andi	r3,r3,1
     62c:	20c00c15 	stw	r3,48(r4)
     630:	10c00017 	ldw	r3,0(r2)
     634:	1807d17a 	srai	r3,r3,5
     638:	18c0004c 	andi	r3,r3,1
     63c:	20c00d15 	stw	r3,52(r4)
     640:	10c0008f 	ldh	r3,2(r2)
     644:	18c003cc 	andi	r3,r3,15
     648:	20c00e15 	stw	r3,56(r4)
     64c:	10c00017 	ldw	r3,0(r2)
     650:	1807d53a 	srai	r3,r3,20
     654:	18c0004c 	andi	r3,r3,1
     658:	20c00f15 	stw	r3,60(r4)
     65c:	10800017 	ldw	r2,0(r2)
     660:	1005d57a 	srai	r2,r2,21
     664:	1080004c 	andi	r2,r2,1
     668:	20801015 	stw	r2,64(r4)
     66c:	d1600104 	addi	r5,gp,-32764
     670:	0000f9c0 	call	f9c <alt_dev_llist_insert>
}
     674:	dfc00017 	ldw	ra,0(sp)
     678:	dec00104 	addi	sp,sp,4
     67c:	f800283a 	ret
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
     680:	10803fcc 	andi	r2,r2,255
     684:	10800468 	cmpgeui	r2,r2,17
     688:	1000081e 	bne	r2,zero,6ac <alt_sys_init+0x2a8>
     68c:	00c00084 	movi	r3,2
     690:	00900034 	movhi	r2,16384
     694:	10c06a15 	stw	r3,424(r2)
     698:	20c00317 	ldw	r3,12(r4)
     69c:	1805d43a 	srai	r2,r3,16
     6a0:	1806d63a 	srli	r3,r3,24
     6a4:	02000044 	movi	r8,1
     6a8:	003f9306 	br	4f8 <alt_sys_init+0xf4>
     6ac:	00c00104 	movi	r3,4
     6b0:	00900034 	movhi	r2,16384
     6b4:	10c06a15 	stw	r3,424(r2)
     6b8:	20c00317 	ldw	r3,12(r4)
     6bc:	1805d43a 	srai	r2,r3,16
     6c0:	1806d63a 	srli	r3,r3,24
     6c4:	02000084 	movi	r8,2
     6c8:	003f8b06 	br	4f8 <alt_sys_init+0xf4>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
     6cc:	10803fcc 	andi	r2,r2,255
     6d0:	10800468 	cmpgeui	r2,r2,17
     6d4:	1000081e 	bne	r2,zero,6f8 <alt_sys_init+0x2f4>
     6d8:	00c00084 	movi	r3,2
     6dc:	00900034 	movhi	r2,16384
     6e0:	10c05315 	stw	r3,332(r2)
     6e4:	20c00317 	ldw	r3,12(r4)
     6e8:	1805d43a 	srai	r2,r3,16
     6ec:	1806d63a 	srli	r3,r3,24
     6f0:	02000044 	movi	r8,1
     6f4:	003fb406 	br	5c8 <alt_sys_init+0x1c4>
     6f8:	00c00104 	movi	r3,4
     6fc:	00900034 	movhi	r2,16384
     700:	10c05315 	stw	r3,332(r2)
     704:	20c00317 	ldw	r3,12(r4)
     708:	1805d43a 	srai	r2,r3,16
     70c:	1806d63a 	srli	r3,r3,24
     710:	02000084 	movi	r8,2
     714:	003fac06 	br	5c8 <alt_sys_init+0x1c4>

00000718 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     718:	deffff04 	addi	sp,sp,-4
     71c:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     720:	20800017 	ldw	r2,0(r4)
     724:	21c00217 	ldw	r7,8(r4)
     728:	11000a04 	addi	r4,r2,40
     72c:	0000a1c0 	call	a1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     730:	dfc00017 	ldw	ra,0(sp)
     734:	dec00104 	addi	sp,sp,4
     738:	f800283a 	ret

0000073c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     73c:	deffff04 	addi	sp,sp,-4
     740:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     744:	20800017 	ldw	r2,0(r4)
     748:	21c00217 	ldw	r7,8(r4)
     74c:	11000a04 	addi	r4,r2,40
     750:	0000b740 	call	b74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     754:	dfc00017 	ldw	ra,0(sp)
     758:	dec00104 	addi	sp,sp,4
     75c:	f800283a 	ret

00000760 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     760:	deffff04 	addi	sp,sp,-4
     764:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     768:	20800017 	ldw	r2,0(r4)
     76c:	21400217 	ldw	r5,8(r4)
     770:	11000a04 	addi	r4,r2,40
     774:	00009600 	call	960 <altera_avalon_jtag_uart_close>
}
     778:	dfc00017 	ldw	ra,0(sp)
     77c:	dec00104 	addi	sp,sp,4
     780:	f800283a 	ret

00000784 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     784:	deffff04 	addi	sp,sp,-4
     788:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     78c:	21000017 	ldw	r4,0(r4)
     790:	21000a04 	addi	r4,r4,40
     794:	00009980 	call	998 <altera_avalon_jtag_uart_ioctl>
}
     798:	dfc00017 	ldw	ra,0(sp)
     79c:	dec00104 	addi	sp,sp,4
     7a0:	f800283a 	ret

000007a4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     7a4:	20800017 	ldw	r2,0(r4)
     7a8:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     7ac:	1081000c 	andi	r2,r2,1024
     7b0:	10000726 	beq	r2,zero,7d0 <altera_avalon_jtag_uart_timeout+0x2c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     7b4:	20c00017 	ldw	r3,0(r4)
     7b8:	20800817 	ldw	r2,32(r4)
     7bc:	10810014 	ori	r2,r2,1024
     7c0:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
     7c4:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     7c8:	d0a01117 	ldw	r2,-32700(gp)
     7cc:	f800283a 	ret
  else if (sp->host_inactive < INT_MAX - 2) {
     7d0:	20c00917 	ldw	r3,36(r4)
     7d4:	00a00034 	movhi	r2,32768
     7d8:	10bfff04 	addi	r2,r2,-4
     7dc:	10fffa36 	bltu	r2,r3,7c8 <altera_avalon_jtag_uart_timeout+0x24>
    sp->host_inactive++;
     7e0:	18c00044 	addi	r3,r3,1
     7e4:	20c00915 	stw	r3,36(r4)
    if (sp->host_inactive >= sp->timeout) {
     7e8:	003ff706 	br	7c8 <altera_avalon_jtag_uart_timeout+0x24>

000007ec <altera_avalon_jtag_uart_irq>:
  unsigned int base = sp->base;
     7ec:	21c00017 	ldw	r7,0(r4)
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7f0:	023fff84 	movi	r8,-2
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     7f4:	027fff44 	movi	r9,-3
     7f8:	00000706 	br	818 <altera_avalon_jtag_uart_irq+0x2c>
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     7fc:	20800817 	ldw	r2,32(r4)
     800:	1204703a 	and	r2,r2,r8
     804:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     808:	38800135 	stwio	r2,4(r7)
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     80c:	38800137 	ldwio	r2,4(r7)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     810:	2880800c 	andi	r2,r5,512
     814:	10001c1e 	bne	r2,zero,888 <altera_avalon_jtag_uart_irq+0x9c>
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     818:	39400137 	ldwio	r5,4(r7)
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     81c:	2880c00c 	andi	r2,r5,768
     820:	10003126 	beq	r2,zero,8e8 <altera_avalon_jtag_uart_irq+0xfc>
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     824:	2880400c 	andi	r2,r5,256
     828:	103ff926 	beq	r2,zero,810 <altera_avalon_jtag_uart_irq+0x24>
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     82c:	20800a17 	ldw	r2,40(r4)
     830:	10800044 	addi	r2,r2,1
     834:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     838:	20c00b17 	ldw	r3,44(r4)
     83c:	10ffef26 	beq	r2,r3,7fc <altera_avalon_jtag_uart_irq+0x10>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     840:	38c00037 	ldwio	r3,0(r7)
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     844:	18a0000c 	andi	r2,r3,32768
     848:	10000c26 	beq	r2,zero,87c <altera_avalon_jtag_uart_irq+0x90>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     84c:	20800a17 	ldw	r2,40(r4)
     850:	2085883a 	add	r2,r4,r2
     854:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     858:	20800a17 	ldw	r2,40(r4)
     85c:	10800044 	addi	r2,r2,1
     860:	1081ffcc 	andi	r2,r2,2047
     864:	20800a15 	stw	r2,40(r4)
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     868:	20800a17 	ldw	r2,40(r4)
     86c:	10800044 	addi	r2,r2,1
     870:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
     874:	21800b17 	ldw	r6,44(r4)
     878:	30bff11e 	bne	r6,r2,840 <altera_avalon_jtag_uart_irq+0x54>
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     87c:	18ffffec 	andhi	r3,r3,65535
     880:	183fe326 	beq	r3,zero,810 <altera_avalon_jtag_uart_irq+0x24>
     884:	003fdd06 	br	7fc <altera_avalon_jtag_uart_irq+0x10>
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     888:	280ad43a 	srli	r5,r5,16
      while (space > 0 && sp->tx_out != sp->tx_in)
     88c:	283fe226 	beq	r5,zero,818 <altera_avalon_jtag_uart_irq+0x2c>
     890:	20c00d17 	ldw	r3,52(r4)
     894:	20800c17 	ldw	r2,48(r4)
     898:	18800b26 	beq	r3,r2,8c8 <altera_avalon_jtag_uart_irq+0xdc>
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     89c:	20800d17 	ldw	r2,52(r4)
     8a0:	2085883a 	add	r2,r4,r2
     8a4:	10820e07 	ldb	r2,2104(r2)
     8a8:	38800035 	stwio	r2,0(r7)
        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     8ac:	20800d17 	ldw	r2,52(r4)
     8b0:	10800044 	addi	r2,r2,1
     8b4:	1081ffcc 	andi	r2,r2,2047
     8b8:	20800d15 	stw	r2,52(r4)
        space--;
     8bc:	297fffc4 	addi	r5,r5,-1
      while (space > 0 && sp->tx_out != sp->tx_in)
     8c0:	283ff31e 	bne	r5,zero,890 <altera_avalon_jtag_uart_irq+0xa4>
     8c4:	003fd406 	br	818 <altera_avalon_jtag_uart_irq+0x2c>
      if (space > 0)
     8c8:	283fd326 	beq	r5,zero,818 <altera_avalon_jtag_uart_irq+0x2c>
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     8cc:	20800817 	ldw	r2,32(r4)
     8d0:	1244703a 	and	r2,r2,r9
     8d4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     8d8:	20c00017 	ldw	r3,0(r4)
     8dc:	18800135 	stwio	r2,4(r3)
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     8e0:	38800137 	ldwio	r2,4(r7)
     8e4:	003fcc06 	br	818 <altera_avalon_jtag_uart_irq+0x2c>
}
     8e8:	f800283a 	ret

000008ec <altera_avalon_jtag_uart_init>:
{
     8ec:	defffe04 	addi	sp,sp,-8
     8f0:	dfc00115 	stw	ra,4(sp)
     8f4:	dc000015 	stw	r16,0(sp)
     8f8:	2021883a 	mov	r16,r4
     8fc:	3009883a 	mov	r4,r6
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     900:	00800044 	movi	r2,1
     904:	80800815 	stw	r2,32(r16)
  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     908:	80c00017 	ldw	r3,0(r16)
     90c:	18800135 	stwio	r2,4(r3)
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     910:	01800034 	movhi	r6,0
     914:	3181fb04 	addi	r6,r6,2028
     918:	800b883a 	mov	r5,r16
     91c:	00011780 	call	1178 <alt_irq_register>
  sp->host_inactive = 0;
     920:	80000915 	stw	zero,36(r16)
  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     924:	800f883a 	mov	r7,r16
     928:	01800034 	movhi	r6,0
     92c:	3181e904 	addi	r6,r6,1956
     930:	d1601117 	ldw	r5,-32700(gp)
     934:	81000204 	addi	r4,r16,8
     938:	0000e480 	call	e48 <alt_alarm_start>
     93c:	10000416 	blt	r2,zero,950 <altera_avalon_jtag_uart_init+0x64>
}
     940:	dfc00117 	ldw	ra,4(sp)
     944:	dc000017 	ldw	r16,0(sp)
     948:	dec00204 	addi	sp,sp,8
     94c:	f800283a 	ret
    sp->timeout = INT_MAX;
     950:	00a00034 	movhi	r2,32768
     954:	10bfffc4 	addi	r2,r2,-1
     958:	80800115 	stw	r2,4(r16)
}
     95c:	003ff806 	br	940 <altera_avalon_jtag_uart_init+0x54>

00000960 <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     960:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
     964:	2950000c 	andi	r5,r5,16384
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     968:	20800d17 	ldw	r2,52(r4)
     96c:	11800826 	beq	r2,r6,990 <altera_avalon_jtag_uart_close+0x30>
     970:	20c00917 	ldw	r3,36(r4)
     974:	20800117 	ldw	r2,4(r4)
     978:	1880032e 	bgeu	r3,r2,988 <altera_avalon_jtag_uart_close+0x28>
    if (flags & O_NONBLOCK) {
     97c:	283ffa26 	beq	r5,zero,968 <altera_avalon_jtag_uart_close+0x8>
      return -EWOULDBLOCK; 
     980:	00bffd44 	movi	r2,-11
     984:	f800283a 	ret
    }
  }

  return 0;
     988:	0005883a 	mov	r2,zero
     98c:	f800283a 	ret
     990:	0005883a 	mov	r2,zero
}
     994:	f800283a 	ret

00000998 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
     998:	289a8060 	cmpeqi	r2,r5,27137
     99c:	1000041e 	bne	r2,zero,9b0 <altera_avalon_jtag_uart_ioctl+0x18>
     9a0:	295a80a0 	cmpeqi	r5,r5,27138
     9a4:	2800101e 	bne	r5,zero,9e8 <altera_avalon_jtag_uart_ioctl+0x50>
     9a8:	00bff9c4 	movi	r2,-25
     9ac:	f800283a 	ret
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     9b0:	20c00117 	ldw	r3,4(r4)
     9b4:	00a00034 	movhi	r2,32768
     9b8:	10bfffc4 	addi	r2,r2,-1
     9bc:	18801326 	beq	r3,r2,a0c <altera_avalon_jtag_uart_ioctl+0x74>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     9c0:	30800017 	ldw	r2,0(r6)
     9c4:	117fff84 	addi	r5,r2,-2
     9c8:	00e00034 	movhi	r3,32768
     9cc:	18ffff04 	addi	r3,r3,-4
     9d0:	1940022e 	bgeu	r3,r5,9dc <altera_avalon_jtag_uart_ioctl+0x44>
     9d4:	00a00034 	movhi	r2,32768
     9d8:	10bfff84 	addi	r2,r2,-2
     9dc:	20800115 	stw	r2,4(r4)
      rc = 0;
     9e0:	0005883a 	mov	r2,zero
     9e4:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     9e8:	20c00117 	ldw	r3,4(r4)
     9ec:	00a00034 	movhi	r2,32768
     9f0:	10bfffc4 	addi	r2,r2,-1
     9f4:	18800726 	beq	r3,r2,a14 <altera_avalon_jtag_uart_ioctl+0x7c>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     9f8:	20800917 	ldw	r2,36(r4)
     9fc:	10c5803a 	cmpltu	r2,r2,r3
     a00:	30800015 	stw	r2,0(r6)
      rc = 0;
     a04:	0005883a 	mov	r2,zero
     a08:	f800283a 	ret
  int rc = -ENOTTY;
     a0c:	00bff9c4 	movi	r2,-25
     a10:	f800283a 	ret
     a14:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
     a18:	f800283a 	ret

00000a1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     a1c:	defff504 	addi	sp,sp,-44
     a20:	dfc00a15 	stw	ra,40(sp)
     a24:	df000915 	stw	fp,36(sp)
     a28:	ddc00815 	stw	r23,32(sp)
     a2c:	dd800715 	stw	r22,28(sp)
     a30:	dd400615 	stw	r21,24(sp)
     a34:	dd000515 	stw	r20,20(sp)
     a38:	dcc00415 	stw	r19,16(sp)
     a3c:	dc800315 	stw	r18,12(sp)
     a40:	dc400215 	stw	r17,8(sp)
     a44:	dc000115 	stw	r16,4(sp)
     a48:	2023883a 	mov	r17,r4
     a4c:	2839883a 	mov	fp,r5
     a50:	d9c00015 	stw	r7,0(sp)
  char * ptr = buffer;
     a54:	2829883a 	mov	r20,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     a58:	05c20004 	movi	r23,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
     a5c:	25800e04 	addi	r22,r4,56
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
     a60:	00002106 	br	ae8 <altera_avalon_jtag_uart_read+0xcc>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     a64:	bc05c83a 	sub	r2,r23,r16
     a68:	00000e06 	br	aa4 <altera_avalon_jtag_uart_read+0x88>
      memcpy(ptr, sp->rx_buf + out, n);
     a6c:	900d883a 	mov	r6,r18
     a70:	b40b883a 	add	r5,r22,r16
     a74:	a009883a 	mov	r4,r20
     a78:	00016f00 	call	16f0 <memcpy>
      ptr   += n;
     a7c:	a4a9883a 	add	r20,r20,r18
      space -= n;
     a80:	ac8dc83a 	sub	r6,r21,r18

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     a84:	84a1883a 	add	r16,r16,r18
     a88:	8401ffcc 	andi	r16,r16,2047
     a8c:	8c000b15 	stw	r16,44(r17)
    }
    while (space > 0);
     a90:	01800a0e 	bge	zero,r6,abc <altera_avalon_jtag_uart_read+0xa0>
      in  = sp->rx_in;
     a94:	8cc00a17 	ldw	r19,40(r17)
      out = sp->rx_out;
     a98:	8c000b17 	ldw	r16,44(r17)
      if (in >= out)
     a9c:	9c3ff136 	bltu	r19,r16,a64 <altera_avalon_jtag_uart_read+0x48>
        n = in - out;
     aa0:	9c05c83a 	sub	r2,r19,r16
      if (n == 0)
     aa4:	10000526 	beq	r2,zero,abc <altera_avalon_jtag_uart_read+0xa0>
      if (n > space)
     aa8:	302b883a 	mov	r21,r6
     aac:	3025883a 	mov	r18,r6
     ab0:	11bfee2e 	bgeu	r2,r6,a6c <altera_avalon_jtag_uart_read+0x50>
     ab4:	1025883a 	mov	r18,r2
     ab8:	003fec06 	br	a6c <altera_avalon_jtag_uart_read+0x50>

    /* If we read any data then return it */
    if (ptr != buffer)
     abc:	a7000c1e 	bne	r20,fp,af0 <altera_avalon_jtag_uart_read+0xd4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     ac0:	d8800017 	ldw	r2,0(sp)
     ac4:	1090000c 	andi	r2,r2,16384
     ac8:	1000201e 	bne	r2,zero,b4c <altera_avalon_jtag_uart_read+0x130>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     acc:	88800a17 	ldw	r2,40(r17)
     ad0:	14c0031e 	bne	r2,r19,ae0 <altera_avalon_jtag_uart_read+0xc4>
     ad4:	88c00917 	ldw	r3,36(r17)
     ad8:	88800117 	ldw	r2,4(r17)
     adc:	18bffb36 	bltu	r3,r2,acc <altera_avalon_jtag_uart_read+0xb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     ae0:	88800a17 	ldw	r2,40(r17)
     ae4:	14c01b26 	beq	r2,r19,b54 <altera_avalon_jtag_uart_read+0x138>
  while (space > 0)
     ae8:	01bfea16 	blt	zero,r6,a94 <altera_avalon_jtag_uart_read+0x78>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     aec:	a7001b26 	beq	r20,fp,b5c <altera_avalon_jtag_uart_read+0x140>
  NIOS2_READ_STATUS (context);
     af0:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     af4:	00bfff84 	movi	r2,-2
     af8:	1884703a 	and	r2,r3,r2
     afc:	1001703a 	wrctl	status,r2
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     b00:	88800817 	ldw	r2,32(r17)
     b04:	10800054 	ori	r2,r2,1
     b08:	88800815 	stw	r2,32(r17)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     b0c:	89000017 	ldw	r4,0(r17)
     b10:	20800135 	stwio	r2,4(r4)
  NIOS2_WRITE_STATUS (context);
     b14:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
     b18:	a705c83a 	sub	r2,r20,fp
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     b1c:	dfc00a17 	ldw	ra,40(sp)
     b20:	df000917 	ldw	fp,36(sp)
     b24:	ddc00817 	ldw	r23,32(sp)
     b28:	dd800717 	ldw	r22,28(sp)
     b2c:	dd400617 	ldw	r21,24(sp)
     b30:	dd000517 	ldw	r20,20(sp)
     b34:	dcc00417 	ldw	r19,16(sp)
     b38:	dc800317 	ldw	r18,12(sp)
     b3c:	dc400217 	ldw	r17,8(sp)
     b40:	dc000117 	ldw	r16,4(sp)
     b44:	dec00b04 	addi	sp,sp,44
     b48:	f800283a 	ret
    return -EWOULDBLOCK;
     b4c:	00bffd44 	movi	r2,-11
     b50:	003ff206 	br	b1c <altera_avalon_jtag_uart_read+0x100>
    return -EIO;
     b54:	00bffec4 	movi	r2,-5
     b58:	003ff006 	br	b1c <altera_avalon_jtag_uart_read+0x100>
  else if (flags & O_NONBLOCK)
     b5c:	d8800017 	ldw	r2,0(sp)
     b60:	10d0000c 	andi	r3,r2,16384
    return -EWOULDBLOCK;
     b64:	00bffd44 	movi	r2,-11
  else if (flags & O_NONBLOCK)
     b68:	183fec1e 	bne	r3,zero,b1c <altera_avalon_jtag_uart_read+0x100>
    return -EIO;
     b6c:	00bffec4 	movi	r2,-5
     b70:	003fea06 	br	b1c <altera_avalon_jtag_uart_read+0x100>

00000b74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     b74:	defff404 	addi	sp,sp,-48
     b78:	dfc00b15 	stw	ra,44(sp)
     b7c:	df000a15 	stw	fp,40(sp)
     b80:	ddc00915 	stw	r23,36(sp)
     b84:	dd800815 	stw	r22,32(sp)
     b88:	dd400715 	stw	r21,28(sp)
     b8c:	dd000615 	stw	r20,24(sp)
     b90:	dcc00515 	stw	r19,20(sp)
     b94:	dc800415 	stw	r18,16(sp)
     b98:	dc400315 	stw	r17,12(sp)
     b9c:	dc000215 	stw	r16,8(sp)
     ba0:	2021883a 	mov	r16,r4
     ba4:	d9400015 	stw	r5,0(sp)
     ba8:	d9c00115 	stw	r7,4(sp)
     bac:	2827883a 	mov	r19,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     bb0:	0701ffc4 	movi	fp,2047
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     bb4:	05c20004 	movi	r23,2048
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
     bb8:	3d50000c 	andi	r21,r7,16384
      memcpy(sp->tx_buf + in, ptr, n);
     bbc:	25820e04 	addi	r22,r4,2104
     bc0:	00001506 	br	c18 <altera_avalon_jtag_uart_write+0xa4>
      else if (out > 0)
     bc4:	20000226 	beq	r4,zero,bd0 <altera_avalon_jtag_uart_write+0x5c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     bc8:	bc45c83a 	sub	r2,r23,r17
     bcc:	00001806 	br	c30 <altera_avalon_jtag_uart_write+0xbc>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     bd0:	e445c83a 	sub	r2,fp,r17
     bd4:	00001606 	br	c30 <altera_avalon_jtag_uart_write+0xbc>
      if (n > count)
     bd8:	3029883a 	mov	r20,r6
     bdc:	3025883a 	mov	r18,r6
     be0:	1180012e 	bgeu	r2,r6,be8 <altera_avalon_jtag_uart_write+0x74>
     be4:	1025883a 	mov	r18,r2
      memcpy(sp->tx_buf + in, ptr, n);
     be8:	900d883a 	mov	r6,r18
     bec:	980b883a 	mov	r5,r19
     bf0:	b449883a 	add	r4,r22,r17
     bf4:	00016f00 	call	16f0 <memcpy>
      ptr   += n;
     bf8:	9ca7883a 	add	r19,r19,r18
      count -= n;
     bfc:	a48dc83a 	sub	r6,r20,r18
      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c00:	8ca3883a 	add	r17,r17,r18
     c04:	8c41ffcc 	andi	r17,r17,2047
     c08:	84400c15 	stw	r17,48(r16)
     c0c:	00000206 	br	c18 <altera_avalon_jtag_uart_write+0xa4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
     c10:	80800917 	ldw	r2,36(r16)
     c14:	10002c1e 	bne	r2,zero,cc8 <altera_avalon_jtag_uart_write+0x154>
    while (count > 0)
     c18:	01802f0e 	bge	zero,r6,cd8 <altera_avalon_jtag_uart_write+0x164>
      in  = sp->tx_in;
     c1c:	84400c17 	ldw	r17,48(r16)
      out = sp->tx_out;
     c20:	81000d17 	ldw	r4,52(r16)
      if (in < out)
     c24:	893fe72e 	bgeu	r17,r4,bc4 <altera_avalon_jtag_uart_write+0x50>
        n = out - 1 - in;
     c28:	20bfffc4 	addi	r2,r4,-1
     c2c:	1445c83a 	sub	r2,r2,r17
      if (n == 0)
     c30:	103fe91e 	bne	r2,zero,bd8 <altera_avalon_jtag_uart_write+0x64>
  NIOS2_READ_STATUS (context);
     c34:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c38:	00bfff84 	movi	r2,-2
     c3c:	1884703a 	and	r2,r3,r2
     c40:	1001703a 	wrctl	status,r2
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     c44:	80800817 	ldw	r2,32(r16)
     c48:	10800094 	ori	r2,r2,2
     c4c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c50:	81400017 	ldw	r5,0(r16)
     c54:	28800135 	stwio	r2,4(r5)
  NIOS2_WRITE_STATUS (context);
     c58:	1801703a 	wrctl	status,r3
      if (flags & O_NONBLOCK)
     c5c:	a800081e 	bne	r21,zero,c80 <altera_avalon_jtag_uart_write+0x10c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     c60:	80800d17 	ldw	r2,52(r16)
     c64:	113fea1e 	bne	r2,r4,c10 <altera_avalon_jtag_uart_write+0x9c>
     c68:	80c00917 	ldw	r3,36(r16)
     c6c:	80800117 	ldw	r2,4(r16)
     c70:	18bffb36 	bltu	r3,r2,c60 <altera_avalon_jtag_uart_write+0xec>
     c74:	003fe606 	br	c10 <altera_avalon_jtag_uart_write+0x9c>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
     c78:	00bffd44 	movi	r2,-11
     c7c:	00000406 	br	c90 <altera_avalon_jtag_uart_write+0x11c>
  if (ptr != start)
     c80:	d8800017 	ldw	r2,0(sp)
     c84:	98800e26 	beq	r19,r2,cc0 <altera_avalon_jtag_uart_write+0x14c>
    return ptr - start;
     c88:	d8800017 	ldw	r2,0(sp)
     c8c:	9885c83a 	sub	r2,r19,r2
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
     c90:	dfc00b17 	ldw	ra,44(sp)
     c94:	df000a17 	ldw	fp,40(sp)
     c98:	ddc00917 	ldw	r23,36(sp)
     c9c:	dd800817 	ldw	r22,32(sp)
     ca0:	dd400717 	ldw	r21,28(sp)
     ca4:	dd000617 	ldw	r20,24(sp)
     ca8:	dcc00517 	ldw	r19,20(sp)
     cac:	dc800417 	ldw	r18,16(sp)
     cb0:	dc400317 	ldw	r17,12(sp)
     cb4:	dc000217 	ldw	r16,8(sp)
     cb8:	dec00c04 	addi	sp,sp,48
     cbc:	f800283a 	ret
    return -EWOULDBLOCK;
     cc0:	00bffd44 	movi	r2,-11
     cc4:	003ff206 	br	c90 <altera_avalon_jtag_uart_write+0x11c>
  if (ptr != start)
     cc8:	d8800017 	ldw	r2,0(sp)
     ccc:	98bfee1e 	bne	r19,r2,c88 <altera_avalon_jtag_uart_write+0x114>
    return -EIO; /* Host not connected */
     cd0:	00bffec4 	movi	r2,-5
     cd4:	003fee06 	br	c90 <altera_avalon_jtag_uart_write+0x11c>
  NIOS2_READ_STATUS (context);
     cd8:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     cdc:	00bfff84 	movi	r2,-2
     ce0:	1884703a 	and	r2,r3,r2
     ce4:	1001703a 	wrctl	status,r2
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     ce8:	80800817 	ldw	r2,32(r16)
     cec:	10800094 	ori	r2,r2,2
     cf0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     cf4:	81000017 	ldw	r4,0(r16)
     cf8:	20800135 	stwio	r2,4(r4)
  NIOS2_WRITE_STATUS (context);
     cfc:	1801703a 	wrctl	status,r3
  if (ptr != start)
     d00:	d8800017 	ldw	r2,0(sp)
     d04:	98bfe01e 	bne	r19,r2,c88 <altera_avalon_jtag_uart_write+0x114>
  else if (flags & O_NONBLOCK)
     d08:	d8800117 	ldw	r2,4(sp)
     d0c:	1090000c 	andi	r2,r2,16384
     d10:	103fd91e 	bne	r2,zero,c78 <altera_avalon_jtag_uart_write+0x104>
    return -EIO; /* Host not connected */
     d14:	00bffec4 	movi	r2,-5
     d18:	003fdd06 	br	c90 <altera_avalon_jtag_uart_write+0x11c>

00000d1c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     d1c:	defffe04 	addi	sp,sp,-8
     d20:	dfc00115 	stw	ra,4(sp)
     d24:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     d28:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     d2c:	20800137 	ldwio	r2,4(r4)
  NIOS2_READ_STATUS (context);
     d30:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     d34:	00bfff84 	movi	r2,-2
     d38:	8084703a 	and	r2,r16,r2
     d3c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
     d40:	00013e80 	call	13e8 <alt_tick>
  NIOS2_WRITE_STATUS (context);
     d44:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
     d48:	dfc00117 	ldw	ra,4(sp)
     d4c:	dc000017 	ldw	r16,0(sp)
     d50:	dec00204 	addi	sp,sp,8
     d54:	f800283a 	ret

00000d58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     d58:	deffff04 	addi	sp,sp,-4
     d5c:	dfc00015 	stw	ra,0(sp)
     d60:	200b883a 	mov	r5,r4
     d64:	3009883a 	mov	r4,r6
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     d68:	d0a01117 	ldw	r2,-32700(gp)
     d6c:	1000011e 	bne	r2,zero,d74 <alt_avalon_timer_sc_init+0x1c>
  {
    _alt_tick_rate = nticks;
     d70:	d1e01115 	stw	r7,-32700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     d74:	008001c4 	movi	r2,7
     d78:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
     d7c:	01800034 	movhi	r6,0
     d80:	31834704 	addi	r6,r6,3356
     d84:	00011780 	call	1178 <alt_irq_register>
#endif  
}
     d88:	dfc00017 	ldw	ra,0(sp)
     d8c:	dec00104 	addi	sp,sp,4
     d90:	f800283a 	ret

00000d94 <alt_up_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_ADC_CH_7(((adc)->base))

alt_up_adc_dev* alt_up_adc_open_dev (const char* name){
     d94:	deffff04 	addi	sp,sp,-4
     d98:	dfc00015 	stw	ra,0(sp)

	alt_up_adc_dev* dev = (alt_up_adc_dev*) alt_find_dev(name, &alt_dev_list);
     d9c:	d1600104 	addi	r5,gp,-32764
     da0:	00010040 	call	1004 <alt_find_dev>
	
	return dev;
}
     da4:	dfc00017 	ldw	ra,0(sp)
     da8:	dec00104 	addi	sp,sp,4
     dac:	f800283a 	ret

00000db0 <alt_up_adc_read>:

unsigned int alt_up_adc_read (alt_up_adc_dev * adc, unsigned channel){

	unsigned int ch = channel % 8;
     db0:	294001cc 	andi	r5,r5,7
	
	switch (ch){
     db4:	280a90ba 	slli	r5,r5,2
     db8:	00800034 	movhi	r2,0
     dbc:	2885883a 	add	r2,r5,r2
     dc0:	10837217 	ldw	r2,3528(r2)
     dc4:	1000683a 	jmp	r2
     dc8:	00000de8 	cmpgeui	zero,zero,55
     dcc:	00000df4 	movhi	zero,55
     dd0:	00000e00 	call	e0 <alt_exception+0xc0>
     dd4:	00000e0c 	andi	zero,zero,56
     dd8:	00000e18 	cmpnei	zero,zero,56
     ddc:	00000e24 	muli	zero,zero,56
     de0:	00000e30 	cmpltui	zero,zero,56
     de4:	00000e3c 	xorhi	zero,zero,56
		case 0:
			return read_ch0(adc);
     de8:	20800a17 	ldw	r2,40(r4)
     dec:	10800037 	ldwio	r2,0(r2)
     df0:	f800283a 	ret
		case 1:
			return read_ch1(adc);
     df4:	20800a17 	ldw	r2,40(r4)
     df8:	10800137 	ldwio	r2,4(r2)
     dfc:	f800283a 	ret
		case 2:
			return read_ch2(adc);
     e00:	20800a17 	ldw	r2,40(r4)
     e04:	10800237 	ldwio	r2,8(r2)
     e08:	f800283a 	ret
		case 3:
			return read_ch3(adc);
     e0c:	20800a17 	ldw	r2,40(r4)
     e10:	10800337 	ldwio	r2,12(r2)
     e14:	f800283a 	ret
		case 4:
			return read_ch4(adc);
     e18:	20800a17 	ldw	r2,40(r4)
     e1c:	10800437 	ldwio	r2,16(r2)
     e20:	f800283a 	ret
		case 5:
			return read_ch5(adc);
     e24:	20800a17 	ldw	r2,40(r4)
     e28:	10800537 	ldwio	r2,20(r2)
     e2c:	f800283a 	ret
		case 6:
			return read_ch6(adc);
     e30:	20800a17 	ldw	r2,40(r4)
     e34:	10800637 	ldwio	r2,24(r2)
     e38:	f800283a 	ret
		case 7:
			return read_ch7(adc);
     e3c:	20800a17 	ldw	r2,40(r4)
     e40:	10800737 	ldwio	r2,28(r2)
		default:
			return 0;
	}
}
     e44:	f800283a 	ret

00000e48 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
  
  if (alt_ticks_per_second ())
     e48:	d0a01117 	ldw	r2,-32700(gp)
     e4c:	10001a26 	beq	r2,zero,eb8 <alt_alarm_start+0x70>
  {
    if (alarm)
     e50:	20001b26 	beq	r4,zero,ec0 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
     e54:	21800415 	stw	r6,16(r4)
      alarm->context  = context;
     e58:	21c00515 	stw	r7,20(r4)
  NIOS2_READ_STATUS (context);
     e5c:	000d303a 	rdctl	r6,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e60:	00bfff84 	movi	r2,-2
     e64:	3084703a 	and	r2,r6,r2
     e68:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     e6c:	d0e00f17 	ldw	r3,-32708(gp)
     e70:	d1e01017 	ldw	r7,-32704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
     e74:	18800044 	addi	r2,r3,1
     e78:	10c7803a 	cmpltu	r3,r2,r3
     e7c:	19c7883a 	add	r3,r3,r7
     e80:	114b883a 	add	r5,r2,r5
     e84:	2885803a 	cmpltu	r2,r5,r2
     e88:	10c5883a 	add	r2,r2,r3
     e8c:	21400215 	stw	r5,8(r4)
     e90:	20800315 	stw	r2,12(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     e94:	d0a00704 	addi	r2,gp,-32740
     e98:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
     e9c:	d0a00717 	ldw	r2,-32740(gp)
     ea0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
     ea4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     ea8:	d1200715 	stw	r4,-32740(gp)
  NIOS2_WRITE_STATUS (context);
     eac:	3001703a 	wrctl	status,r6
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
     eb0:	0005883a 	mov	r2,zero
     eb4:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
     eb8:	00bfde84 	movi	r2,-134
     ebc:	f800283a 	ret
      return -EINVAL;
     ec0:	00bffa84 	movi	r2,-22
  }
}
     ec4:	f800283a 	ret

00000ec8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     ec8:	defffd04 	addi	sp,sp,-12
     ecc:	dfc00215 	stw	ra,8(sp)
     ed0:	dc400115 	stw	r17,4(sp)
     ed4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     ed8:	20002016 	blt	r4,zero,f5c <close+0x94>
     edc:	2021883a 	mov	r16,r4
     ee0:	21000324 	muli	r4,r4,12
     ee4:	00900034 	movhi	r2,16384
     ee8:	1084a004 	addi	r2,r2,4736
     eec:	2089883a 	add	r4,r4,r2

  if (fd)
     ef0:	20001a26 	beq	r4,zero,f5c <close+0x94>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     ef4:	80c00324 	muli	r3,r16,12
     ef8:	00900034 	movhi	r2,16384
     efc:	1885883a 	add	r2,r3,r2
     f00:	1084a017 	ldw	r2,4736(r2)
     f04:	10800417 	ldw	r2,16(r2)
     f08:	10001d26 	beq	r2,zero,f80 <close+0xb8>
     f0c:	103ee83a 	callr	r2
     f10:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     f14:	8009883a 	mov	r4,r16
     f18:	00013900 	call	1390 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
     f1c:	0005883a 	mov	r2,zero
    if (rval < 0)
     f20:	88000516 	blt	r17,zero,f38 <close+0x70>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     f24:	dfc00217 	ldw	ra,8(sp)
     f28:	dc400117 	ldw	r17,4(sp)
     f2c:	dc000017 	ldw	r16,0(sp)
     f30:	dec00304 	addi	sp,sp,12
     f34:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     f38:	d0a00517 	ldw	r2,-32748(gp)
     f3c:	10000526 	beq	r2,zero,f54 <close+0x8c>
     f40:	103ee83a 	callr	r2
      ALT_ERRNO = -rval;
     f44:	0463c83a 	sub	r17,zero,r17
     f48:	14400015 	stw	r17,0(r2)
      return -1;
     f4c:	00bfffc4 	movi	r2,-1
     f50:	003ff406 	br	f24 <close+0x5c>
     f54:	d0a01304 	addi	r2,gp,-32692
     f58:	003ffa06 	br	f44 <close+0x7c>
     f5c:	d0a00517 	ldw	r2,-32748(gp)
     f60:	10000526 	beq	r2,zero,f78 <close+0xb0>
     f64:	103ee83a 	callr	r2
    ALT_ERRNO = EBADFD;
     f68:	00c01444 	movi	r3,81
     f6c:	10c00015 	stw	r3,0(r2)
    return -1;
     f70:	00bfffc4 	movi	r2,-1
     f74:	003feb06 	br	f24 <close+0x5c>
     f78:	d0a01304 	addi	r2,gp,-32692
     f7c:	003ffa06 	br	f68 <close+0xa0>
    alt_release_fd (fildes);
     f80:	8009883a 	mov	r4,r16
     f84:	00013900 	call	1390 <alt_release_fd>
    return 0;
     f88:	0005883a 	mov	r2,zero
     f8c:	003fe506 	br	f24 <close+0x5c>

00000f90 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     f90:	f800283a 	ret

00000f94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
     f94:	3005883a 	mov	r2,r6
  return len;
}
     f98:	f800283a 	ret

00000f9c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     f9c:	20000926 	beq	r4,zero,fc4 <alt_dev_llist_insert+0x28>
     fa0:	20800217 	ldw	r2,8(r4)
     fa4:	10000726 	beq	r2,zero,fc4 <alt_dev_llist_insert+0x28>
  entry->previous = list;
     fa8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
     fac:	28800017 	ldw	r2,0(r5)
     fb0:	20800015 	stw	r2,0(r4)
  list->next->previous = entry;
     fb4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
     fb8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
     fbc:	0005883a 	mov	r2,zero
     fc0:	f800283a 	ret
     fc4:	d0a00517 	ldw	r2,-32748(gp)
     fc8:	10000926 	beq	r2,zero,ff0 <alt_dev_llist_insert+0x54>
{
     fcc:	deffff04 	addi	sp,sp,-4
     fd0:	dfc00015 	stw	ra,0(sp)
     fd4:	103ee83a 	callr	r2
    ALT_ERRNO = EINVAL;
     fd8:	00c00584 	movi	r3,22
     fdc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     fe0:	00bffa84 	movi	r2,-22
}
     fe4:	dfc00017 	ldw	ra,0(sp)
     fe8:	dec00104 	addi	sp,sp,4
     fec:	f800283a 	ret
     ff0:	d0a01304 	addi	r2,gp,-32692
    ALT_ERRNO = EINVAL;
     ff4:	00c00584 	movi	r3,22
     ff8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
     ffc:	00bffa84 	movi	r2,-22
}
    1000:	f800283a 	ret

00001004 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1004:	defffb04 	addi	sp,sp,-20
    1008:	dfc00415 	stw	ra,16(sp)
    100c:	dcc00315 	stw	r19,12(sp)
    1010:	dc800215 	stw	r18,8(sp)
    1014:	dc400115 	stw	r17,4(sp)
    1018:	dc000015 	stw	r16,0(sp)
    101c:	2027883a 	mov	r19,r4
    1020:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    1024:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    1028:	00017f00 	call	17f0 <strlen>
    102c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1030:	8c001026 	beq	r17,r16,1074 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1034:	900d883a 	mov	r6,r18
    1038:	980b883a 	mov	r5,r19
    103c:	81000217 	ldw	r4,8(r16)
    1040:	00016780 	call	1678 <memcmp>
    1044:	10000326 	beq	r2,zero,1054 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    1048:	84000017 	ldw	r16,0(r16)
  while (next != (alt_dev*) llist)
    104c:	8c3ff91e 	bne	r17,r16,1034 <alt_find_dev+0x30>
  }
  
  /* No match found */
  
  return NULL;
    1050:	0021883a 	mov	r16,zero
}
    1054:	8005883a 	mov	r2,r16
    1058:	dfc00417 	ldw	ra,16(sp)
    105c:	dcc00317 	ldw	r19,12(sp)
    1060:	dc800217 	ldw	r18,8(sp)
    1064:	dc400117 	ldw	r17,4(sp)
    1068:	dc000017 	ldw	r16,0(sp)
    106c:	dec00504 	addi	sp,sp,20
    1070:	f800283a 	ret
  return NULL;
    1074:	0021883a 	mov	r16,zero
    1078:	003ff606 	br	1054 <alt_find_dev+0x50>

0000107c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    107c:	deffff04 	addi	sp,sp,-4
    1080:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1084:	01440004 	movi	r5,4096
    1088:	0009883a 	mov	r4,zero
    108c:	00015cc0 	call	15cc <alt_icache_flush>
#endif
}
    1090:	dfc00017 	ldw	ra,0(sp)
    1094:	dec00104 	addi	sp,sp,4
    1098:	f800283a 	ret

0000109c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    109c:	defffe04 	addi	sp,sp,-8
    10a0:	dfc00115 	stw	ra,4(sp)
    10a4:	dc000015 	stw	r16,0(sp)
    10a8:	2021883a 	mov	r16,r4
    10ac:	2809883a 	mov	r4,r5
    10b0:	300b883a 	mov	r5,r6
    10b4:	380d883a 	mov	r6,r7
  int old;

  old = open (name, flags, mode);
    10b8:	00012240 	call	1224 <open>

  if (old >= 0)
    10bc:	1000040e 	bge	r2,zero,10d0 <alt_open_fd+0x34>
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
    10c0:	dfc00117 	ldw	ra,4(sp)
    10c4:	dc000017 	ldw	r16,0(sp)
    10c8:	dec00204 	addi	sp,sp,8
    10cc:	f800283a 	ret
    10d0:	1009883a 	mov	r4,r2
    fd->dev      = alt_fd_list[old].dev;
    10d4:	00900034 	movhi	r2,16384
    10d8:	1084a004 	addi	r2,r2,4736
    10dc:	20c00324 	muli	r3,r4,12
    10e0:	10c5883a 	add	r2,r2,r3
    10e4:	10c00017 	ldw	r3,0(r2)
    10e8:	80c00015 	stw	r3,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    10ec:	10c00117 	ldw	r3,4(r2)
    10f0:	80c00115 	stw	r3,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    10f4:	10800217 	ldw	r2,8(r2)
    10f8:	80800215 	stw	r2,8(r16)
    alt_release_fd (old);
    10fc:	00013900 	call	1390 <alt_release_fd>
} 
    1100:	003fef06 	br	10c0 <alt_open_fd+0x24>

00001104 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1104:	defffd04 	addi	sp,sp,-12
    1108:	dfc00215 	stw	ra,8(sp)
    110c:	dc400115 	stw	r17,4(sp)
    1110:	dc000015 	stw	r16,0(sp)
    1114:	2823883a 	mov	r17,r5
    1118:	3021883a 	mov	r16,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    111c:	01c07fc4 	movi	r7,511
    1120:	01800044 	movi	r6,1
    1124:	200b883a 	mov	r5,r4
    1128:	01100034 	movhi	r4,16384
    112c:	2104a304 	addi	r4,r4,4748
    1130:	000109c0 	call	109c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1134:	01c07fc4 	movi	r7,511
    1138:	000d883a 	mov	r6,zero
    113c:	880b883a 	mov	r5,r17
    1140:	01100034 	movhi	r4,16384
    1144:	2104a004 	addi	r4,r4,4736
    1148:	000109c0 	call	109c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    114c:	01c07fc4 	movi	r7,511
    1150:	01800044 	movi	r6,1
    1154:	800b883a 	mov	r5,r16
    1158:	01100034 	movhi	r4,16384
    115c:	2104a604 	addi	r4,r4,4760
    1160:	000109c0 	call	109c <alt_open_fd>
}  
    1164:	dfc00217 	ldw	ra,8(sp)
    1168:	dc400117 	ldw	r17,4(sp)
    116c:	dc000017 	ldw	r16,0(sp)
    1170:	dec00304 	addi	sp,sp,12
    1174:	f800283a 	ret

00001178 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1178:	20800828 	cmpgeui	r2,r4,32
    117c:	1000271e 	bne	r2,zero,121c <alt_irq_register+0xa4>
  NIOS2_READ_STATUS (context);
    1180:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1184:	00bfff84 	movi	r2,-2
    1188:	1884703a 	and	r2,r3,r2
    118c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    1190:	00900034 	movhi	r2,16384
    1194:	10862704 	addi	r2,r2,6300
    1198:	200e90fa 	slli	r7,r4,3
    119c:	11c5883a 	add	r2,r2,r7
    11a0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    11a4:	11400115 	stw	r5,4(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    11a8:	30000f26 	beq	r6,zero,11e8 <alt_irq_register+0x70>
  NIOS2_READ_STATUS (context);
    11ac:	000b303a 	rdctl	r5,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11b0:	00bfff84 	movi	r2,-2
    11b4:	2884703a 	and	r2,r5,r2
    11b8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    11bc:	d1a00e17 	ldw	r6,-32712(gp)
    11c0:	00800044 	movi	r2,1
    11c4:	1104983a 	sll	r2,r2,r4
    11c8:	1184b03a 	or	r2,r2,r6
    11cc:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    11d0:	d0a00e17 	ldw	r2,-32712(gp)
    11d4:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    11d8:	2801703a 	wrctl	status,r5
    11dc:	1801703a 	wrctl	status,r3
    11e0:	0005883a 	mov	r2,zero
}
    11e4:	f800283a 	ret
  NIOS2_READ_STATUS (context);
    11e8:	000b303a 	rdctl	r5,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11ec:	00bfff84 	movi	r2,-2
    11f0:	2884703a 	and	r2,r5,r2
    11f4:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
    11f8:	d1a00e17 	ldw	r6,-32712(gp)
    11fc:	00bfff84 	movi	r2,-2
    1200:	1104183a 	rol	r2,r2,r4
    1204:	1184703a 	and	r2,r2,r6
    1208:	d0a00e15 	stw	r2,-32712(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    120c:	d0a00e17 	ldw	r2,-32712(gp)
    1210:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
    1214:	2801703a 	wrctl	status,r5
  return 0;
    1218:	003ff006 	br	11dc <alt_irq_register+0x64>
  int rc = -EINVAL;  
    121c:	00bffa84 	movi	r2,-22

    alt_irq_enable_all(status);
  }
  return rc; 
}
    1220:	f800283a 	ret

00001224 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1224:	defffa04 	addi	sp,sp,-24
    1228:	dfc00515 	stw	ra,20(sp)
    122c:	dd000415 	stw	r20,16(sp)
    1230:	dcc00315 	stw	r19,12(sp)
    1234:	dc800215 	stw	r18,8(sp)
    1238:	dc400115 	stw	r17,4(sp)
    123c:	dc000015 	stw	r16,0(sp)
    1240:	2027883a 	mov	r19,r4
    1244:	2825883a 	mov	r18,r5
    1248:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    124c:	d1600104 	addi	r5,gp,-32764
    1250:	00010040 	call	1004 <alt_find_dev>
    1254:	10000f26 	beq	r2,zero,1294 <open+0x70>
    1258:	1023883a 	mov	r17,r2
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    125c:	1009883a 	mov	r4,r2
    1260:	00015800 	call	1580 <alt_get_fd>
    1264:	1021883a 	mov	r16,r2
    1268:	10003c0e 	bge	r2,zero,135c <open+0x138>
    126c:	8023883a 	mov	r17,r16

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    1270:	8009883a 	mov	r4,r16
    1274:	00013900 	call	1390 <alt_release_fd>
    1278:	d0a00517 	ldw	r2,-32748(gp)
    127c:	10003326 	beq	r2,zero,134c <open+0x128>
    1280:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    1284:	0463c83a 	sub	r17,zero,r17
    1288:	14400015 	stw	r17,0(r2)
    return -1;
    128c:	043fffc4 	movi	r16,-1
    1290:	00001806 	br	12f4 <open+0xd0>
    dev   = alt_find_file (file);
    1294:	9809883a 	mov	r4,r19
    1298:	00014b00 	call	14b0 <alt_find_file>
    129c:	1023883a 	mov	r17,r2
  if (dev)
    12a0:	10001d26 	beq	r2,zero,1318 <open+0xf4>
    if ((index = alt_get_fd (dev)) < 0)
    12a4:	1009883a 	mov	r4,r2
    12a8:	00015800 	call	1580 <alt_get_fd>
    12ac:	1021883a 	mov	r16,r2
    12b0:	10002816 	blt	r2,zero,1354 <open+0x130>
      fd = &alt_fd_list[index];
    12b4:	81000324 	muli	r4,r16,12
    12b8:	00900034 	movhi	r2,16384
    12bc:	1084a004 	addi	r2,r2,4736
    12c0:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    12c4:	00900034 	movhi	r2,16384
    12c8:	10bfffc4 	addi	r2,r2,-1
    12cc:	9084703a 	and	r2,r18,r2
    12d0:	20800215 	stw	r2,8(r4)
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    12d4:	88800317 	ldw	r2,12(r17)
    12d8:	10000626 	beq	r2,zero,12f4 <open+0xd0>
    12dc:	a00f883a 	mov	r7,r20
    12e0:	900d883a 	mov	r6,r18
    12e4:	980b883a 	mov	r5,r19
    12e8:	103ee83a 	callr	r2
    12ec:	1023883a 	mov	r17,r2
  if (status < 0)
    12f0:	103fdf16 	blt	r2,zero,1270 <open+0x4c>
  }
  
  /* return the reference upon success */

  return index;
}
    12f4:	8005883a 	mov	r2,r16
    12f8:	dfc00517 	ldw	ra,20(sp)
    12fc:	dd000417 	ldw	r20,16(sp)
    1300:	dcc00317 	ldw	r19,12(sp)
    1304:	dc800217 	ldw	r18,8(sp)
    1308:	dc400117 	ldw	r17,4(sp)
    130c:	dc000017 	ldw	r16,0(sp)
    1310:	dec00604 	addi	sp,sp,24
    1314:	f800283a 	ret
    status = -ENODEV;
    1318:	047ffb44 	movi	r17,-19
  int index  = -1;
    131c:	043fffc4 	movi	r16,-1
    1320:	003fd306 	br	1270 <open+0x4c>
  for (i = 0; i <= alt_max_fd; i++)
    1324:	42000044 	addi	r8,r8,1
    1328:	18c00304 	addi	r3,r3,12
    132c:	3a3fe936 	bltu	r7,r8,12d4 <open+0xb0>
    if ((alt_fd_list[i].dev == fd->dev) &&
    1330:	18800017 	ldw	r2,0(r3)
    1334:	11bffb1e 	bne	r2,r6,1324 <open+0x100>
    1338:	18800217 	ldw	r2,8(r3)
    133c:	103ff90e 	bge	r2,zero,1324 <open+0x100>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1340:	193ff826 	beq	r3,r4,1324 <open+0x100>
      return -EACCES;
    1344:	047ffcc4 	movi	r17,-13
    1348:	003fc906 	br	1270 <open+0x4c>
    134c:	d0a01304 	addi	r2,gp,-32692
    1350:	003fcc06 	br	1284 <open+0x60>
    if ((index = alt_get_fd (dev)) < 0)
    1354:	8023883a 	mov	r17,r16
    1358:	003fc506 	br	1270 <open+0x4c>
      fd = &alt_fd_list[index];
    135c:	81000324 	muli	r4,r16,12
    1360:	00d00034 	movhi	r3,16384
    1364:	18c4a004 	addi	r3,r3,4736
    1368:	20c9883a 	add	r4,r4,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    136c:	00900034 	movhi	r2,16384
    1370:	10bfffc4 	addi	r2,r2,-1
    1374:	9084703a 	and	r2,r18,r2
  fd->fd_flags |= ALT_FD_DEV;
    1378:	10900034 	orhi	r2,r2,16384
    137c:	20800215 	stw	r2,8(r4)
  for (i = 0; i <= alt_max_fd; i++)
    1380:	d1e00017 	ldw	r7,-32768(gp)
    if ((alt_fd_list[i].dev == fd->dev) &&
    1384:	21800017 	ldw	r6,0(r4)
  for (i = 0; i <= alt_max_fd; i++)
    1388:	0011883a 	mov	r8,zero
    138c:	003fe806 	br	1330 <open+0x10c>

00001390 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    1390:	208000d0 	cmplti	r2,r4,3
    1394:	1000061e 	bne	r2,zero,13b0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    1398:	00900034 	movhi	r2,16384
    139c:	1084a004 	addi	r2,r2,4736
    13a0:	21000324 	muli	r4,r4,12
    13a4:	1105883a 	add	r2,r2,r4
    13a8:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
    13ac:	10000015 	stw	zero,0(r2)
  }
}
    13b0:	f800283a 	ret

000013b4 <alt_alarm_stop>:
  NIOS2_READ_STATUS (context);
    13b4:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13b8:	00bfff84 	movi	r2,-2
    13bc:	1884703a 	and	r2,r3,r2
    13c0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    13c4:	21400017 	ldw	r5,0(r4)
    13c8:	20800117 	ldw	r2,4(r4)
    13cc:	28800115 	stw	r2,4(r5)
  entry->previous->next = entry->next;
    13d0:	21400017 	ldw	r5,0(r4)
    13d4:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    13d8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    13dc:	21000015 	stw	r4,0(r4)
  NIOS2_WRITE_STATUS (context);
    13e0:	1801703a 	wrctl	status,r3
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    13e4:	f800283a 	ret

000013e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    13e8:	defffc04 	addi	sp,sp,-16
    13ec:	dfc00315 	stw	ra,12(sp)
    13f0:	dc800215 	stw	r18,8(sp)
    13f4:	dc400115 	stw	r17,4(sp)
    13f8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    13fc:	d1200704 	addi	r4,gp,-32740
    1400:	d4600717 	ldw	r17,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1404:	d0a00f17 	ldw	r2,-32708(gp)
    1408:	d1601017 	ldw	r5,-32704(gp)
    140c:	10c00044 	addi	r3,r2,1
    1410:	1885803a 	cmpltu	r2,r3,r2
    1414:	1145883a 	add	r2,r2,r5
    1418:	d0e00f15 	stw	r3,-32708(gp)
    141c:	d0a01015 	stw	r2,-32704(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1420:	89001b26 	beq	r17,r4,1490 <alt_tick+0xa8>
    1424:	2025883a 	mov	r18,r4
    1428:	00000c06 	br	145c <alt_tick+0x74>
    next = (alt_alarm*) alarm->llist.next;
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
    {
      next_callback = alarm->callback (alarm->context);
    142c:	80800417 	ldw	r2,16(r16)
    1430:	81000517 	ldw	r4,20(r16)
    1434:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1438:	10001226 	beq	r2,zero,1484 <alt_tick+0x9c>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    143c:	80c00217 	ldw	r3,8(r16)
    1440:	81000317 	ldw	r4,12(r16)
    1444:	10c7883a 	add	r3,r2,r3
    1448:	1885803a 	cmpltu	r2,r3,r2
    144c:	1105883a 	add	r2,r2,r4
    1450:	80c00215 	stw	r3,8(r16)
    1454:	80800315 	stw	r2,12(r16)
  while (alarm != (alt_alarm*) &alt_alarm_list)
    1458:	8c800d26 	beq	r17,r18,1490 <alt_tick+0xa8>
    next = (alt_alarm*) alarm->llist.next;
    145c:	8821883a 	mov	r16,r17
    1460:	8c400017 	ldw	r17,0(r17)
    if (alarm->time <= _alt_nticks)
    1464:	d1200f17 	ldw	r4,-32708(gp)
    1468:	d0a01017 	ldw	r2,-32704(gp)
    146c:	80c00317 	ldw	r3,12(r16)
    1470:	10fff936 	bltu	r2,r3,1458 <alt_tick+0x70>
    1474:	18bfed1e 	bne	r3,r2,142c <alt_tick+0x44>
    1478:	80800217 	ldw	r2,8(r16)
    147c:	20bff636 	bltu	r4,r2,1458 <alt_tick+0x70>
    1480:	003fea06 	br	142c <alt_tick+0x44>
        alt_alarm_stop (alarm);
    1484:	8009883a 	mov	r4,r16
    1488:	00013b40 	call	13b4 <alt_alarm_stop>
    148c:	003ff206 	br	1458 <alt_tick+0x70>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1490:	dfc00317 	ldw	ra,12(sp)
    1494:	dc800217 	ldw	r18,8(sp)
    1498:	dc400117 	ldw	r17,4(sp)
    149c:	dc000017 	ldw	r16,0(sp)
    14a0:	dec00404 	addi	sp,sp,16
    14a4:	f800283a 	ret

000014a8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    14a8:	000170fa 	wrctl	ienable,zero
}
    14ac:	f800283a 	ret

000014b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    14b0:	defffb04 	addi	sp,sp,-20
    14b4:	dfc00415 	stw	ra,16(sp)
    14b8:	dcc00315 	stw	r19,12(sp)
    14bc:	dc800215 	stw	r18,8(sp)
    14c0:	dc400115 	stw	r17,4(sp)
    14c4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    14c8:	d0a00304 	addi	r2,gp,-32756
    14cc:	d4200317 	ldw	r16,-32756(gp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    14d0:	80802926 	beq	r16,r2,1578 <alt_find_file+0xc8>
    14d4:	2025883a 	mov	r18,r4
    14d8:	1027883a 	mov	r19,r2
    14dc:	00000806 	br	1500 <alt_find_file+0x50>
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    {
      len -= 1;
    14e0:	10ffffc4 	addi	r3,r2,-1
    14e4:	00000e06 	br	1520 <alt_find_file+0x70>
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    14e8:	900b883a 	mov	r5,r18
    14ec:	8809883a 	mov	r4,r17
    14f0:	00016780 	call	1678 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    14f4:	10001826 	beq	r2,zero,1558 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    14f8:	84000017 	ldw	r16,0(r16)
  while (next != (alt_dev*) &alt_fs_list)
    14fc:	84c01526 	beq	r16,r19,1554 <alt_find_file+0xa4>
    len = strlen(next->name);
    1500:	84400217 	ldw	r17,8(r16)
    1504:	8809883a 	mov	r4,r17
    1508:	00017f00 	call	17f0 <strlen>
    150c:	1007883a 	mov	r3,r2
    if (next->name[len-1] == '/')
    1510:	8889883a 	add	r4,r17,r2
    1514:	213fffc7 	ldb	r4,-1(r4)
    1518:	21000bd8 	cmpnei	r4,r4,47
    151c:	203ff026 	beq	r4,zero,14e0 <alt_find_file+0x30>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    1520:	180d883a 	mov	r6,r3
    1524:	90c7883a 	add	r3,r18,r3
    1528:	18c00003 	ldbu	r3,0(r3)
    152c:	18803fcc 	andi	r2,r3,255
    1530:	1080201c 	xori	r2,r2,128
    1534:	10bfe004 	addi	r2,r2,-128
    1538:	10800be0 	cmpeqi	r2,r2,47
    153c:	103fea1e 	bne	r2,zero,14e8 <alt_find_file+0x38>
    1540:	18c03fcc 	andi	r3,r3,255
    1544:	18c0201c 	xori	r3,r3,128
    1548:	18ffe004 	addi	r3,r3,-128
    154c:	183fea1e 	bne	r3,zero,14f8 <alt_find_file+0x48>
    1550:	003fe506 	br	14e8 <alt_find_file+0x38>
  }
  
  /* No match found */
  
  return NULL;     
    1554:	0021883a 	mov	r16,zero
}
    1558:	8005883a 	mov	r2,r16
    155c:	dfc00417 	ldw	ra,16(sp)
    1560:	dcc00317 	ldw	r19,12(sp)
    1564:	dc800217 	ldw	r18,8(sp)
    1568:	dc400117 	ldw	r17,4(sp)
    156c:	dc000017 	ldw	r16,0(sp)
    1570:	dec00504 	addi	sp,sp,20
    1574:	f800283a 	ret
  return NULL;     
    1578:	0021883a 	mov	r16,zero
    157c:	003ff606 	br	1558 <alt_find_file+0xa8>

00001580 <alt_get_fd>:
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1580:	00d00034 	movhi	r3,16384
    1584:	18c4a004 	addi	r3,r3,4736
    1588:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    158c:	19400017 	ldw	r5,0(r3)
    1590:	28000626 	beq	r5,zero,15ac <alt_get_fd+0x2c>
  for (i = 0; i < ALT_MAX_FD; i++)
    1594:	10800044 	addi	r2,r2,1
    1598:	18c00304 	addi	r3,r3,12
    159c:	11400818 	cmpnei	r5,r2,32
    15a0:	283ffa1e 	bne	r5,zero,158c <alt_get_fd+0xc>
  int rc = -EMFILE;
    15a4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    15a8:	f800283a 	ret
      alt_fd_list[i].dev = dev;
    15ac:	11400324 	muli	r5,r2,12
    15b0:	00d00034 	movhi	r3,16384
    15b4:	28c7883a 	add	r3,r5,r3
    15b8:	1904a015 	stw	r4,4736(r3)
      if (i > alt_max_fd)
    15bc:	d0e00017 	ldw	r3,-32768(gp)
    15c0:	18bff90e 	bge	r3,r2,15a8 <alt_get_fd+0x28>
        alt_max_fd = i;
    15c4:	d0a00015 	stw	r2,-32768(gp)
    15c8:	f800283a 	ret

000015cc <alt_icache_flush>:

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    15cc:	28840070 	cmpltui	r2,r5,4097
    15d0:	1000011e 	bne	r2,zero,15d8 <alt_icache_flush+0xc>
    15d4:	01440004 	movi	r5,4096
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    15d8:	2147883a 	add	r3,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    15dc:	20c00e2e 	bgeu	r4,r3,1618 <alt_icache_flush+0x4c>
    15e0:	2005883a 	mov	r2,r4
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    15e4:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    15e8:	10800804 	addi	r2,r2,32
    15ec:	10fffd36 	bltu	r2,r3,15e4 <alt_icache_flush+0x18>
    15f0:	28bfffc4 	addi	r2,r5,-1
    15f4:	1004d17a 	srli	r2,r2,5
    15f8:	10800044 	addi	r2,r2,1
    15fc:	1004917a 	slli	r2,r2,5
    1600:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    1604:	210007cc 	andi	r4,r4,31
    1608:	20000126 	beq	r4,zero,1610 <alt_icache_flush+0x44>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    160c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    1610:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    1614:	f800283a 	ret
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    1618:	2005883a 	mov	r2,r4
    161c:	003ff906 	br	1604 <alt_icache_flush+0x38>

00001620 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    1620:	213ffe84 	addi	r4,r4,-6
    1624:	20800428 	cmpgeui	r2,r4,16
    1628:	1000041e 	bne	r2,zero,163c <alt_exception_cause_generated_bad_addr+0x1c>
    162c:	00a2c8d4 	movui	r2,35619
    1630:	1104d83a 	srl	r2,r2,r4
    1634:	1080004c 	andi	r2,r2,1
    1638:	f800283a 	ret
{
    163c:	0005883a 	mov	r2,zero
    return 0;

  default:
    return 0;
  }
}
    1640:	f800283a 	ret

00001644 <exit>:
    1644:	defffe04 	addi	sp,sp,-8
    1648:	000b883a 	mov	r5,zero
    164c:	dc000015 	stw	r16,0(sp)
    1650:	dfc00115 	stw	ra,4(sp)
    1654:	2021883a 	mov	r16,r4
    1658:	00018880 	call	1888 <__call_exitprocs>
    165c:	00900034 	movhi	r2,16384
    1660:	11061c17 	ldw	r4,6256(r2)
    1664:	20800f17 	ldw	r2,60(r4)
    1668:	10000126 	beq	r2,zero,1670 <exit+0x2c>
    166c:	103ee83a 	callr	r2
    1670:	8009883a 	mov	r4,r16
    1674:	00019a80 	call	19a8 <_exit>

00001678 <memcmp>:
    1678:	30800130 	cmpltui	r2,r6,4
    167c:	10000b1e 	bne	r2,zero,16ac <memcmp+0x34>
    1680:	2144b03a 	or	r2,r4,r5
    1684:	108000cc 	andi	r2,r2,3
    1688:	1000171e 	bne	r2,zero,16e8 <memcmp+0x70>
    168c:	20c00017 	ldw	r3,0(r4)
    1690:	28800017 	ldw	r2,0(r5)
    1694:	1880141e 	bne	r3,r2,16e8 <memcmp+0x70>
    1698:	31bfff04 	addi	r6,r6,-4
    169c:	30800128 	cmpgeui	r2,r6,4
    16a0:	21000104 	addi	r4,r4,4
    16a4:	29400104 	addi	r5,r5,4
    16a8:	103ff81e 	bne	r2,zero,168c <memcmp+0x14>
    16ac:	30bfffc4 	addi	r2,r6,-1
    16b0:	30000b26 	beq	r6,zero,16e0 <memcmp+0x68>
    16b4:	11800044 	addi	r6,r2,1
    16b8:	218d883a 	add	r6,r4,r6
    16bc:	00000106 	br	16c4 <memcmp+0x4c>
    16c0:	21800726 	beq	r4,r6,16e0 <memcmp+0x68>
    16c4:	20800003 	ldbu	r2,0(r4)
    16c8:	28c00003 	ldbu	r3,0(r5)
    16cc:	21000044 	addi	r4,r4,1
    16d0:	29400044 	addi	r5,r5,1
    16d4:	10fffa26 	beq	r2,r3,16c0 <memcmp+0x48>
    16d8:	10c5c83a 	sub	r2,r2,r3
    16dc:	f800283a 	ret
    16e0:	0005883a 	mov	r2,zero
    16e4:	f800283a 	ret
    16e8:	30bfffc4 	addi	r2,r6,-1
    16ec:	003ff106 	br	16b4 <memcmp+0x3c>

000016f0 <memcpy>:
    16f0:	30c00430 	cmpltui	r3,r6,16
    16f4:	2005883a 	mov	r2,r4
    16f8:	18002d1e 	bne	r3,zero,17b0 <memcpy+0xc0>
    16fc:	2146b03a 	or	r3,r4,r5
    1700:	18c000cc 	andi	r3,r3,3
    1704:	1800351e 	bne	r3,zero,17dc <memcpy+0xec>
    1708:	32fffc04 	addi	r11,r6,-16
    170c:	5816d13a 	srli	r11,r11,4
    1710:	280f883a 	mov	r7,r5
    1714:	2007883a 	mov	r3,r4
    1718:	5ac00044 	addi	r11,r11,1
    171c:	5816913a 	slli	r11,r11,4
    1720:	22d5883a 	add	r10,r4,r11
    1724:	39000117 	ldw	r4,4(r7)
    1728:	3a400017 	ldw	r9,0(r7)
    172c:	3a000217 	ldw	r8,8(r7)
    1730:	19000115 	stw	r4,4(r3)
    1734:	39000317 	ldw	r4,12(r7)
    1738:	1a400015 	stw	r9,0(r3)
    173c:	1a000215 	stw	r8,8(r3)
    1740:	19000315 	stw	r4,12(r3)
    1744:	18c00404 	addi	r3,r3,16
    1748:	39c00404 	addi	r7,r7,16
    174c:	50fff51e 	bne	r10,r3,1724 <memcpy+0x34>
    1750:	3100030c 	andi	r4,r6,12
    1754:	2acb883a 	add	r5,r5,r11
    1758:	320003cc 	andi	r8,r6,15
    175c:	20002226 	beq	r4,zero,17e8 <memcpy+0xf8>
    1760:	280f883a 	mov	r7,r5
    1764:	1813883a 	mov	r9,r3
    1768:	39c00104 	addi	r7,r7,4
    176c:	3abfff17 	ldw	r10,-4(r7)
    1770:	41c9c83a 	sub	r4,r8,r7
    1774:	2909883a 	add	r4,r5,r4
    1778:	4a800015 	stw	r10,0(r9)
    177c:	21000128 	cmpgeui	r4,r4,4
    1780:	4a400104 	addi	r9,r9,4
    1784:	203ff81e 	bne	r4,zero,1768 <memcpy+0x78>
    1788:	413fff04 	addi	r4,r8,-4
    178c:	2008d0ba 	srli	r4,r4,2
    1790:	318000cc 	andi	r6,r6,3
    1794:	31ffffc4 	addi	r7,r6,-1
    1798:	21000044 	addi	r4,r4,1
    179c:	200890ba 	slli	r4,r4,2
    17a0:	1907883a 	add	r3,r3,r4
    17a4:	290b883a 	add	r5,r5,r4
    17a8:	3000041e 	bne	r6,zero,17bc <memcpy+0xcc>
    17ac:	f800283a 	ret
    17b0:	2007883a 	mov	r3,r4
    17b4:	31ffffc4 	addi	r7,r6,-1
    17b8:	303ffc26 	beq	r6,zero,17ac <memcpy+0xbc>
    17bc:	39c00044 	addi	r7,r7,1
    17c0:	19cf883a 	add	r7,r3,r7
    17c4:	29800003 	ldbu	r6,0(r5)
    17c8:	18c00044 	addi	r3,r3,1
    17cc:	29400044 	addi	r5,r5,1
    17d0:	19bfffc5 	stb	r6,-1(r3)
    17d4:	38fffb1e 	bne	r7,r3,17c4 <memcpy+0xd4>
    17d8:	f800283a 	ret
    17dc:	31ffffc4 	addi	r7,r6,-1
    17e0:	2007883a 	mov	r3,r4
    17e4:	003ff506 	br	17bc <memcpy+0xcc>
    17e8:	400d883a 	mov	r6,r8
    17ec:	003ff106 	br	17b4 <memcpy+0xc4>

000017f0 <strlen>:
    17f0:	208000cc 	andi	r2,r4,3
    17f4:	10000926 	beq	r2,zero,181c <strlen+0x2c>
    17f8:	2005883a 	mov	r2,r4
    17fc:	00000306 	br	180c <strlen+0x1c>
    1800:	10800044 	addi	r2,r2,1
    1804:	10c000cc 	andi	r3,r2,3
    1808:	18000526 	beq	r3,zero,1820 <strlen+0x30>
    180c:	10c00007 	ldb	r3,0(r2)
    1810:	183ffb1e 	bne	r3,zero,1800 <strlen+0x10>
    1814:	1105c83a 	sub	r2,r2,r4
    1818:	f800283a 	ret
    181c:	2005883a 	mov	r2,r4
    1820:	11400017 	ldw	r5,0(r2)
    1824:	01ffbff4 	movhi	r7,65279
    1828:	39ffbfc4 	addi	r7,r7,-257
    182c:	29c7883a 	add	r3,r5,r7
    1830:	01a02074 	movhi	r6,32897
    1834:	014a303a 	nor	r5,zero,r5
    1838:	1946703a 	and	r3,r3,r5
    183c:	31a02004 	addi	r6,r6,-32640
    1840:	1986703a 	and	r3,r3,r6
    1844:	1800071e 	bne	r3,zero,1864 <strlen+0x74>
    1848:	11400117 	ldw	r5,4(r2)
    184c:	10800104 	addi	r2,r2,4
    1850:	29c7883a 	add	r3,r5,r7
    1854:	014a303a 	nor	r5,zero,r5
    1858:	1946703a 	and	r3,r3,r5
    185c:	1986703a 	and	r3,r3,r6
    1860:	183ff926 	beq	r3,zero,1848 <strlen+0x58>
    1864:	10c00007 	ldb	r3,0(r2)
    1868:	183fea26 	beq	r3,zero,1814 <strlen+0x24>
    186c:	10c00047 	ldb	r3,1(r2)
    1870:	10800044 	addi	r2,r2,1
    1874:	183fe726 	beq	r3,zero,1814 <strlen+0x24>
    1878:	10c00047 	ldb	r3,1(r2)
    187c:	10800044 	addi	r2,r2,1
    1880:	183ffa1e 	bne	r3,zero,186c <strlen+0x7c>
    1884:	003fe306 	br	1814 <strlen+0x24>

00001888 <__call_exitprocs>:
    1888:	defff704 	addi	sp,sp,-36
    188c:	00900034 	movhi	r2,16384
    1890:	dcc00315 	stw	r19,12(sp)
    1894:	14c61c17 	ldw	r19,6256(r2)
    1898:	dc800215 	stw	r18,8(sp)
    189c:	dfc00815 	stw	ra,32(sp)
    18a0:	9c805217 	ldw	r18,328(r19)
    18a4:	ddc00715 	stw	r23,28(sp)
    18a8:	dd800615 	stw	r22,24(sp)
    18ac:	dd400515 	stw	r21,20(sp)
    18b0:	dd000415 	stw	r20,16(sp)
    18b4:	dc400115 	stw	r17,4(sp)
    18b8:	dc000015 	stw	r16,0(sp)
    18bc:	90001026 	beq	r18,zero,1900 <__call_exitprocs+0x78>
    18c0:	202b883a 	mov	r21,r4
    18c4:	282d883a 	mov	r22,r5
    18c8:	05000044 	movi	r20,1
    18cc:	94000117 	ldw	r16,4(r18)
    18d0:	847fffc4 	addi	r17,r16,-1
    18d4:	88000a16 	blt	r17,zero,1900 <__call_exitprocs+0x78>
    18d8:	84000044 	addi	r16,r16,1
    18dc:	802090ba 	slli	r16,r16,2
    18e0:	9421883a 	add	r16,r18,r16
    18e4:	b0001126 	beq	r22,zero,192c <__call_exitprocs+0xa4>
    18e8:	80804017 	ldw	r2,256(r16)
    18ec:	15800f26 	beq	r2,r22,192c <__call_exitprocs+0xa4>
    18f0:	8c7fffc4 	addi	r17,r17,-1
    18f4:	88bfffd8 	cmpnei	r2,r17,-1
    18f8:	843fff04 	addi	r16,r16,-4
    18fc:	103ff91e 	bne	r2,zero,18e4 <__call_exitprocs+0x5c>
    1900:	dfc00817 	ldw	ra,32(sp)
    1904:	ddc00717 	ldw	r23,28(sp)
    1908:	dd800617 	ldw	r22,24(sp)
    190c:	dd400517 	ldw	r21,20(sp)
    1910:	dd000417 	ldw	r20,16(sp)
    1914:	dcc00317 	ldw	r19,12(sp)
    1918:	dc800217 	ldw	r18,8(sp)
    191c:	dc400117 	ldw	r17,4(sp)
    1920:	dc000017 	ldw	r16,0(sp)
    1924:	dec00904 	addi	sp,sp,36
    1928:	f800283a 	ret
    192c:	90800117 	ldw	r2,4(r18)
    1930:	81800017 	ldw	r6,0(r16)
    1934:	10bfffc4 	addi	r2,r2,-1
    1938:	14401726 	beq	r2,r17,1998 <__call_exitprocs+0x110>
    193c:	80000015 	stw	zero,0(r16)
    1940:	303feb26 	beq	r6,zero,18f0 <__call_exitprocs+0x68>
    1944:	a446983a 	sll	r3,r20,r17
    1948:	90806217 	ldw	r2,392(r18)
    194c:	95c00117 	ldw	r23,4(r18)
    1950:	1884703a 	and	r2,r3,r2
    1954:	1000081e 	bne	r2,zero,1978 <__call_exitprocs+0xf0>
    1958:	303ee83a 	callr	r6
    195c:	90c00117 	ldw	r3,4(r18)
    1960:	98805217 	ldw	r2,328(r19)
    1964:	1dc0011e 	bne	r3,r23,196c <__call_exitprocs+0xe4>
    1968:	14bfe126 	beq	r2,r18,18f0 <__call_exitprocs+0x68>
    196c:	103fe426 	beq	r2,zero,1900 <__call_exitprocs+0x78>
    1970:	1025883a 	mov	r18,r2
    1974:	003fd506 	br	18cc <__call_exitprocs+0x44>
    1978:	90806317 	ldw	r2,396(r18)
    197c:	81002017 	ldw	r4,128(r16)
    1980:	1886703a 	and	r3,r3,r2
    1984:	1800061e 	bne	r3,zero,19a0 <__call_exitprocs+0x118>
    1988:	200b883a 	mov	r5,r4
    198c:	a809883a 	mov	r4,r21
    1990:	303ee83a 	callr	r6
    1994:	003ff106 	br	195c <__call_exitprocs+0xd4>
    1998:	94400115 	stw	r17,4(r18)
    199c:	003fe806 	br	1940 <__call_exitprocs+0xb8>
    19a0:	303ee83a 	callr	r6
    19a4:	003fed06 	br	195c <__call_exitprocs+0xd4>

000019a8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    19a8:	20000226 	beq	r4,zero,19b4 <_exit+0xc>
    ALT_SIM_FAIL();
    19ac:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    19b0:	003fff06 	br	19b0 <_exit+0x8>
  } else {
    ALT_SIM_PASS();
    19b4:	002af0b0 	cmpltui	zero,zero,43970
    19b8:	003ffd06 	br	19b0 <_exit+0x8>
